[*] Start mutation process:
   - targets: S_x_v1
   - tests: tests_Sxv1
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 0, 0, 1, 1]
[0, 0, 0, 0, 0, 0, 2, 0]
[0, 0, 0, 0, 0, 1, 0, 0]
[0, 0, 0, 0, 0, 1, 0, 1]
[0, 0, 0, 0, 0, 1, 1, 0]
[0, 0, 0, 0, 0, 2, 0, 0]
[0, 0, 0, 0, 1, 0, 0, 0]
[0, 0, 0, 0, 1, 0, 0, 1]
[0, 0, 0, 0, 1, 0, 1, 0]
[0, 0, 0, 0, 1, 1, 0, 0]
[0, 0, 0, 0, 2, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 0, 1]
[0, 0, 0, 1, 0, 0, 1, 0]
[0, 0, 0, 1, 0, 1, 0, 0]
[0, 0, 0, 1, 1, 0, 0, 0]
[0, 0, 0, 2, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 1]
[0, 0, 1, 0, 0, 0, 1, 0]
[0, 0, 1, 0, 0, 1, 0, 0]
[0, 0, 1, 0, 1, 0, 0, 0]
[0, 0, 1, 1, 0, 0, 0, 0]
[0, 0, 2, 0, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0, 0, 1]
[0, 1, 0, 0, 0, 0, 1, 0]
[0, 1, 0, 0, 0, 1, 0, 0]
[0, 1, 0, 0, 1, 0, 0, 0]
[0, 1, 0, 1, 0, 0, 0, 0]
[0, 1, 1, 0, 0, 0, 0, 0]
[0, 2, 0, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 0, 1]
[1, 0, 0, 0, 0, 0, 1, 0]
[1, 0, 0, 0, 0, 1, 0, 0]
[1, 0, 0, 0, 1, 0, 0, 0]
[1, 0, 0, 1, 0, 0, 0, 0]
[1, 0, 1, 0, 0, 0, 0, 0]
[1, 1, 0, 0, 0, 0, 0, 0]
[2, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 1]
[0, 1, 0]
[1, 0, 0]
[0, 0, 0]
[*] 2 tests passed:
   - tests_Sxv1 [0.00241 s]
[*] Start mutants generation and execution:
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 1, 1]
[0, 0, 0, 0, 2, 0]
[0, 0, 0, 0, 2, 1]
[0, 0, 0, 0, 3, 0]
[0, 0, 0, 0, 3, 1]
[0, 0, 0, 0, 4, 0]
[0, 0, 0, 0, 4, 1]
[0, 0, 0, 0, 5, 0]
[0, 0, 0, 0, 6, 0]
[0, 0, 0, 0, 7, 0]
[0, 0, 0, 0, 8, 0]
[0, 0, 0, 1, 0, 0]
[0, 0, 0, 1, 0, 1]
[0, 0, 0, 1, 1, 0]
[0, 0, 0, 1, 1, 1]
[0, 0, 0, 1, 2, 0]
[0, 0, 0, 1, 2, 1]
[0, 0, 0, 1, 3, 0]
[0, 0, 0, 1, 4, 0]
[0, 0, 0, 1, 5, 0]
[0, 0, 0, 1, 6, 0]
[0, 0, 0, 2, 0, 0]
[0, 0, 0, 2, 0, 1]
[0, 0, 0, 2, 1, 0]
[0, 0, 0, 2, 2, 0]
[0, 0, 0, 2, 3, 0]
[0, 0, 0, 3, 0, 0]
[0, 0, 1, 0, 0, 0]
[0, 0, 1, 0, 0, 1]
[0, 0, 1, 0, 1, 0]
[0, 0, 1, 0, 1, 1]
[0, 0, 1, 0, 2, 0]
[0, 0, 1, 0, 2, 1]
[0, 0, 1, 0, 3, 0]
[0, 0, 1, 0, 3, 1]
[0, 0, 1, 0, 4, 0]
[0, 0, 1, 0, 5, 0]
[0, 0, 1, 0, 6, 0]
[0, 0, 1, 1, 0, 0]
[0, 0, 1, 1, 0, 1]
[0, 0, 1, 1, 1, 0]
[0, 0, 1, 1, 1, 1]
[0, 0, 1, 1, 2, 0]
[0, 0, 1, 1, 3, 0]
[0, 0, 1, 2, 0, 0]
[0, 0, 2, 0, 0, 0]
[0, 0, 2, 0, 0, 1]
[0, 0, 2, 0, 1, 0]
[0, 0, 2, 0, 1, 1]
[0, 0, 2, 0, 2, 0]
[0, 0, 2, 0, 3, 0]
[0, 0, 2, 1, 0, 0]
[0, 0, 3, 0, 0, 0]
[0, 1, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 1]
[0, 1, 0, 0, 1, 0]
[0, 1, 0, 0, 1, 1]
[0, 1, 0, 0, 2, 0]
[0, 1, 0, 0, 2, 1]
[0, 1, 0, 0, 3, 0]
[0, 1, 0, 0, 3, 1]
[0, 1, 0, 0, 4, 0]
[0, 1, 0, 0, 5, 0]
[0, 1, 0, 0, 6, 0]
[0, 1, 0, 0, 7, 0]
[0, 1, 0, 1, 0, 0]
[0, 1, 0, 1, 0, 1]
[0, 1, 0, 1, 1, 0]
[0, 1, 0, 1, 1, 1]
[0, 1, 0, 1, 2, 0]
[0, 1, 0, 1, 3, 0]
[0, 1, 0, 1, 4, 0]
[0, 1, 0, 2, 0, 0]
[0, 1, 0, 2, 1, 0]
[0, 1, 1, 0, 0, 0]
[0, 1, 1, 0, 0, 1]
[0, 1, 1, 0, 1, 0]
[0, 1, 1, 0, 1, 1]
[0, 1, 1, 0, 2, 0]
[0, 1, 1, 0, 2, 1]
[0, 1, 1, 0, 3, 0]
[0, 1, 1, 0, 4, 0]
[0, 1, 1, 1, 0, 0]
[0, 1, 1, 1, 1, 0]
[0, 1, 2, 0, 0, 0]
[0, 1, 2, 0, 1, 0]
[0, 2, 0, 0, 0, 0]
[0, 2, 0, 0, 0, 1]
[0, 2, 0, 0, 1, 0]
[0, 2, 0, 0, 1, 1]
[0, 2, 0, 0, 2, 0]
[0, 2, 0, 0, 2, 1]
[0, 2, 0, 0, 3, 0]
[0, 2, 0, 0, 4, 0]
[0, 2, 0, 0, 5, 0]
[0, 2, 0, 1, 0, 0]
[0, 2, 0, 1, 0, 1]
[0, 2, 0, 1, 1, 0]
[0, 2, 0, 1, 2, 0]
[0, 2, 1, 0, 0, 0]
[0, 2, 1, 0, 0, 1]
[0, 2, 1, 0, 1, 0]
[0, 2, 1, 0, 2, 0]
[0, 3, 0, 0, 0, 0]
[0, 3, 0, 0, 0, 1]
[0, 3, 0, 0, 1, 0]
[0, 3, 0, 0, 1, 1]
[0, 3, 0, 0, 2, 0]
[0, 3, 0, 0, 3, 0]
[0, 3, 0, 1, 0, 0]
[0, 3, 1, 0, 0, 0]
[0, 4, 0, 0, 0, 0]
[0, 4, 0, 0, 1, 0]
[1, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 1]
[1, 0, 0, 0, 1, 0]
[1, 0, 0, 0, 1, 1]
[1, 0, 0, 0, 2, 0]
[1, 0, 0, 0, 2, 1]
[1, 0, 0, 0, 3, 0]
[1, 0, 0, 0, 4, 0]
[1, 0, 0, 0, 5, 0]
[1, 0, 0, 0, 6, 0]
[1, 0, 0, 1, 0, 0]
[1, 0, 0, 1, 0, 1]
[1, 0, 0, 1, 1, 0]
[1, 0, 0, 1, 2, 0]
[1, 0, 0, 1, 3, 0]
[1, 0, 0, 1, 4, 0]
[1, 0, 0, 2, 0, 0]
[1, 0, 0, 2, 1, 0]
[1, 0, 0, 2, 2, 0]
[1, 0, 1, 0, 0, 0]
[1, 0, 1, 0, 0, 1]
[1, 0, 1, 0, 1, 0]
[1, 0, 1, 0, 1, 1]
[1, 0, 1, 0, 2, 0]
[1, 0, 1, 0, 3, 0]
[1, 0, 1, 0, 4, 0]
[1, 0, 1, 0, 5, 0]
[1, 0, 1, 1, 0, 0]
[1, 0, 1, 1, 1, 0]
[1, 0, 1, 1, 2, 0]
[1, 0, 2, 0, 0, 0]
[1, 0, 2, 0, 0, 1]
[1, 0, 2, 0, 1, 0]
[1, 0, 2, 0, 2, 0]
[1, 1, 0, 0, 0, 0]
[1, 1, 0, 0, 0, 1]
[1, 1, 0, 0, 1, 0]
[1, 1, 0, 0, 1, 1]
[1, 1, 0, 0, 2, 0]
[1, 1, 0, 0, 3, 0]
[1, 1, 0, 0, 4, 0]
[1, 1, 0, 0, 5, 0]
[1, 1, 0, 1, 0, 0]
[1, 1, 0, 1, 1, 0]
[1, 1, 0, 1, 2, 0]
[1, 1, 0, 1, 3, 0]
[1, 1, 0, 2, 0, 0]
[1, 1, 1, 0, 0, 0]
[1, 1, 1, 0, 0, 1]
[1, 1, 1, 0, 1, 0]
[1, 1, 1, 0, 2, 0]
[1, 1, 1, 0, 3, 0]
[1, 1, 1, 1, 0, 0]
[1, 1, 2, 0, 0, 0]
[1, 2, 0, 0, 0, 0]
[1, 2, 0, 0, 0, 1]
[1, 2, 0, 0, 1, 0]
[1, 2, 0, 0, 2, 0]
[1, 2, 0, 0, 3, 0]
[1, 2, 0, 0, 4, 0]
[1, 2, 0, 1, 0, 0]
[1, 2, 0, 1, 1, 0]
[1, 2, 1, 0, 0, 0]
[1, 2, 1, 0, 1, 0]
[1, 3, 0, 0, 0, 0]
[1, 3, 0, 0, 1, 0]
[1, 3, 0, 0, 2, 0]
[1, 4, 0, 0, 0, 0]
[2, 0, 0, 0, 0, 0]
[2, 0, 0, 0, 0, 1]
[2, 0, 0, 0, 1, 0]
[2, 0, 0, 0, 2, 0]
[2, 0, 0, 0, 3, 0]
[2, 0, 0, 0, 4, 0]
[2, 0, 0, 1, 0, 0]
[2, 0, 0, 1, 1, 0]
[2, 0, 0, 1, 2, 0]
[2, 0, 0, 2, 0, 0]
[2, 0, 1, 0, 0, 0]
[2, 0, 1, 0, 1, 0]
[2, 0, 1, 0, 2, 0]
[2, 0, 1, 0, 3, 0]
[2, 0, 1, 1, 0, 0]
[2, 0, 1, 1, 1, 0]
[2, 0, 2, 0, 0, 0]
[2, 0, 2, 0, 1, 0]
[2, 1, 0, 0, 0, 0]
[2, 1, 0, 0, 1, 0]
[2, 1, 0, 0, 2, 0]
[2, 1, 0, 0, 3, 0]
[2, 1, 0, 1, 0, 0]
[2, 1, 0, 1, 1, 0]
[2, 1, 1, 0, 0, 0]
[2, 1, 1, 0, 1, 0]
[2, 1, 1, 0, 2, 0]
[2, 2, 0, 0, 0, 0]
[2, 2, 0, 0, 1, 0]
[2, 2, 0, 0, 2, 0]
[2, 2, 0, 1, 0, 0]
[2, 2, 1, 0, 0, 0]
[2, 3, 0, 0, 0, 0]
[2, 3, 0, 0, 1, 0]
[3, 0, 0, 0, 0, 0]
[3, 0, 0, 0, 1, 0]
[3, 0, 0, 0, 2, 0]
[3, 0, 0, 1, 0, 0]
[3, 0, 1, 0, 0, 0]
[3, 0, 1, 0, 1, 0]
[3, 0, 2, 0, 0, 0]
[3, 1, 0, 0, 0, 0]
[3, 1, 0, 0, 1, 0]
[3, 1, 1, 0, 0, 0]
[3, 2, 0, 0, 0, 0]
[4, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 0, 0, 1, 1]
[0, 0, 0, 0, 0, 0, 2, 0]
[0, 0, 0, 0, 0, 1, 0, 0]
[0, 0, 0, 0, 0, 1, 0, 1]
[0, 0, 0, 0, 0, 1, 1, 0]
[0, 0, 0, 0, 0, 2, 0, 0]
[0, 0, 0, 0, 1, 0, 0, 0]
[0, 0, 0, 0, 1, 0, 0, 1]
[0, 0, 0, 0, 1, 0, 1, 0]
[0, 0, 0, 0, 1, 1, 0, 0]
[0, 0, 0, 0, 2, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 0, 1]
[0, 0, 0, 1, 0, 0, 1, 0]
[0, 0, 0, 1, 0, 1, 0, 0]
[0, 0, 0, 1, 1, 0, 0, 0]
[0, 0, 0, 2, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0, 0, 1]
[0, 1, 0, 0, 0, 0, 1, 0]
[0, 1, 0, 0, 0, 1, 0, 0]
[0, 1, 0, 0, 1, 0, 0, 0]
[0, 1, 0, 0, 2, 0, 0, 0]
[0, 1, 0, 1, 0, 0, 0, 0]
[0, 1, 0, 1, 1, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 0, 0]
[1, 1, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0]
   - [#   1] AOR S_x_v1: 
--------------------------------------------------------------------------------
   4:     def __init__(self, A, X):
   5:         self.A = A
   6:         self.X = X
   7:         
-  8:         self.current = [0] * len(A)
+  8:         self.current = [0] / len(A)
   9:         self.route = len(A) - 1
  10:         self.rem1 = X[0]
  11:         self.rem2 = X[1]
  12:         self.res_per_route = [[0, 0] for x in range(len(A))]
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[5.00795 s] timeout
   - [#   2] AOR S_x_v1: 
--------------------------------------------------------------------------------
   4:     def __init__(self, A, X):
   5:         self.A = A
   6:         self.X = X
   7:         
-  8:         self.current = [0] * len(A)
+  8:         self.current = [0] // len(A)
   9:         self.route = len(A) - 1
  10:         self.rem1 = X[0]
  11:         self.rem2 = X[1]
  12:         self.res_per_route = [[0, 0] for x in range(len(A))]
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[5.00675 s] timeout
   - [#   3] AOR S_x_v1: 
--------------------------------------------------------------------------------
   4:     def __init__(self, A, X):
   5:         self.A = A
   6:         self.X = X
   7:         
-  8:         self.current = [0] * len(A)
+  8:         self.current = [0] ** len(A)
   9:         self.route = len(A) - 1
  10:         self.rem1 = X[0]
  11:         self.rem2 = X[1]
  12:         self.res_per_route = [[0, 0] for x in range(len(A))]
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[5.00761 s] timeout
   - [#   4] AOR S_x_v1: 
--------------------------------------------------------------------------------
   5:         self.A = A
   6:         self.X = X
   7:         
   8:         self.current = [0] * len(A)
-  9:         self.route = len(A) - 1
+  9:         self.route = len(A) + 1
  10:         self.rem1 = X[0]
  11:         self.rem2 = X[1]
  12:         self.res_per_route = [[0, 0] for x in range(len(A))]
  13:     
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0.01123 s] killed by test_does_not_exceed (tests_Sxv1.TestSx)
   - [#   5] AOR S_x_v1: 
--------------------------------------------------------------------------------
  20:             while self.route > 0:
  21:                 self.route -= 1
  22:                 if self.one_more_route_i_fits(self.route):
  23:                     self.add_one_more_route_i(self.route)
- 24:                     self.route = len(self.A) - 1
+ 24:                     self.route = len(self.A) + 1
  25:                     return self.current
  26:                 else:
  27:                     self.remove_all_routes_of_type_i(self.route)
  28:             self.route = len(self.A) - 1
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 1, 0]
[0.00812 s] killed by test_does_not_exceed (tests_Sxv1.TestSx)
   - [#   6] AOR S_x_v1: 
--------------------------------------------------------------------------------
  24:                     self.route = len(self.A) - 1
  25:                     return self.current
  26:                 else:
  27:                     self.remove_all_routes_of_type_i(self.route)
- 28:             self.route = len(self.A) - 1
+ 28:             self.route = len(self.A) + 1
  29:             return self.current
  30:     
  31:     def add_one_more_route_i(self, i):
  32:         self.rem1 -= self.A[i][0]
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 0, 0, 3]
[0, 0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 0, 1, 1]
[0, 0, 0, 0, 0, 1, 2]
[0, 0, 0, 0, 0, 1, 3]
[0, 0, 0, 0, 0, 2, 0]
[0, 0, 0, 0, 0, 2, 1]
[0, 0, 0, 0, 1, 0, 0]
[0, 0, 0, 0, 1, 0, 1]
[0, 0, 0, 0, 1, 0, 2]
[0, 0, 0, 0, 1, 1, 0]
[0, 0, 0, 0, 1, 1, 1]
[0, 0, 0, 0, 1, 1, 2]
[0, 0, 0, 0, 1, 2, 0]
[0, 0, 0, 0, 2, 0, 0]
[0, 0, 0, 0, 2, 0, 1]
[0, 0, 0, 0, 2, 1, 0]
[0, 0, 0, 0, 2, 1, 1]
[0, 0, 0, 0, 3, 0, 0]
[0, 0, 0, 0, 3, 1, 0]
[0, 0, 0, 1, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 1]
[0, 0, 0, 1, 0, 0, 2]
[0, 0, 0, 1, 0, 1, 0]
[0, 0, 0, 1, 0, 1, 1]
[0, 0, 0, 1, 1, 0, 0]
[0, 0, 0, 1, 1, 0, 1]
[0, 0, 0, 1, 1, 1, 0]
[0, 0, 0, 1, 2, 0, 0]
[0, 0, 0, 2, 0, 0, 0]
[0, 0, 0, 2, 0, 0, 1]
[0, 0, 0, 2, 1, 0, 0]
[0, 0, 1, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 1]
[0, 0, 1, 0, 0, 0, 2]
[0, 0, 1, 0, 0, 1, 0]
[0, 0, 1, 0, 0, 1, 1]
[0, 0, 1, 0, 0, 2, 0]
[0, 0, 1, 0, 1, 0, 0]
[0, 0, 1, 0, 1, 0, 1]
[0, 0, 1, 0, 1, 1, 0]
[0, 0, 1, 0, 2, 0, 0]
[0, 0, 1, 1, 0, 0, 0]
[0, 0, 1, 1, 0, 0, 1]
[0, 0, 1, 1, 0, 1, 0]
[0, 0, 1, 1, 1, 0, 0]
[0, 0, 1, 2, 0, 0, 0]
[0, 0, 2, 0, 0, 0, 0]
[0, 0, 2, 0, 0, 1, 0]
[0, 1, 0, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0, 1]
[0, 1, 0, 0, 0, 0, 2]
[0, 1, 0, 0, 0, 1, 0]
[0, 1, 0, 0, 0, 1, 1]
[0, 1, 0, 0, 1, 0, 0]
[0, 1, 0, 0, 1, 0, 1]
[0, 1, 0, 0, 1, 1, 0]
[0, 1, 0, 0, 2, 0, 0]
[0, 1, 0, 1, 0, 0, 0]
[0, 1, 0, 1, 0, 0, 1]
[0, 1, 0, 1, 1, 0, 0]
[0, 1, 1, 0, 0, 0, 0]
[0, 1, 1, 0, 0, 1, 0]
[0, 2, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 1]
[1, 0, 0, 0, 0, 0, 2]
[1, 0, 0, 0, 0, 0, 3]
[1, 0, 0, 0, 0, 1, 0]
[1, 0, 0, 0, 0, 1, 1]
[1, 0, 0, 0, 1, 0, 0]
[1, 0, 0, 0, 1, 0, 1]
[1, 0, 0, 0, 1, 0, 2]
[1, 0, 0, 0, 1, 1, 0]
[1, 0, 0, 0, 2, 0, 0]
[1, 0, 0, 0, 2, 0, 1]
[1, 0, 0, 0, 3, 0, 0]
[1, 0, 0, 1, 0, 0, 0]
[1, 0, 0, 1, 0, 0, 1]
[1, 0, 0, 1, 1, 0, 0]
[1, 0, 1, 0, 0, 0, 0]
[1, 0, 1, 0, 0, 0, 1]
[1, 0, 1, 0, 0, 1, 0]
[1, 0, 1, 0, 1, 0, 0]
[1, 0, 1, 1, 0, 0, 0]
[1, 0, 2, 0, 0, 0, 0]
[1, 1, 0, 0, 0, 0, 0]
[1, 1, 0, 0, 0, 0, 1]
[1, 1, 0, 0, 1, 0, 0]
[1, 1, 1, 0, 0, 0, 0]
[2, 0, 0, 0, 0, 0, 0]
[2, 0, 0, 0, 0, 0, 1]
[2, 0, 0, 0, 1, 0, 0]
[2, 0, 1, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 1]
[0, 0, 0, 0, 2]
[0, 0, 0, 1, 0]
[0, 0, 0, 1, 1]
[0, 0, 0, 2, 0]
[0, 0, 1, 0, 0]
[0, 1, 0, 0, 0]
[1, 0, 0, 0, 0]
[0, 0, 0, 0, 0]
[0.01295 s] survived
   - [#   7] AOR S_x_v1: 
--------------------------------------------------------------------------------
  31:     def add_one_more_route_i(self, i):
  32:         self.rem1 -= self.A[i][0]
  33:         self.rem2 -= self.A[i][1]
  34:         self.current[i] += 1
- 35:         self.res_per_route[i][0] = self.res_per_route[i][0] + self.A[i][0]
+ 35:         self.res_per_route[i][0] = self.res_per_route[i][0] - self.A[i][0]
  36:         self.res_per_route[i][1] = self.res_per_route[i][1] + self.A[i][1]
  37:     
  38:     def one_more_route_i_fits(self, i):
  39:         return (self.A[i][0] <= self.rem1 and self.A[i][1] <= self.rem2)
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 1]
[0, 0, 0, 2]
[0, 0, 0, 3]
[0, 0, 1, 0]
[0, 0, 1, 1]
[0, 0, 1, 2]
[0, 0, 2, 0]
[0, 1, 0, 0]
[0, 1, 0, 1]
[0, 1, 0, 2]
[0, 1, 1, 0]
[0, 1, 1, 1]
[0, 2, 0, 0]
[0, 2, 0, 1]
[0, 2, 1, 0]
[0, 3, 0, 0]
[1, 0, 0, 0]
[1, 0, 0, 1]
[1, 0, 0, 2]
[1, 0, 1, 0]
[1, 1, 0, 0]
[1, 1, 0, 1]
[1, 2, 0, 0]
[2, 0, 0, 0]
[0, 0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 0, 0, 1, 1]
[0, 0, 0, 0, 0, 0, 2, 0]
[0, 0, 0, 0, 0, 1, 0, 0]
[0, 0, 0, 0, 0, 1, 0, 1]
[0, 0, 0, 0, 0, 1, 1, 0]
[0, 0, 0, 0, 0, 2, 0, 0]
[0, 0, 0, 0, 1, 0, 0, 0]
[0, 0, 0, 0, 1, 0, 0, 1]
[0, 0, 0, 0, 1, 0, 1, 0]
[0, 0, 0, 0, 1, 1, 0, 0]
[0, 0, 0, 0, 2, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 0, 1]
[0, 0, 0, 1, 0, 0, 1, 0]
[0, 0, 0, 1, 0, 1, 0, 0]
[0, 0, 0, 1, 1, 0, 0, 0]
[0, 0, 0, 2, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0, 1, 0]
[0, 1, 0, 0, 0, 1, 0, 0]
[1, 0, 0, 0, 0, 0, 0, 0]
[1, 1, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0]
[0.00846 s] survived
   - [#   8] AOR S_x_v1: 
--------------------------------------------------------------------------------
  32:         self.rem1 -= self.A[i][0]
  33:         self.rem2 -= self.A[i][1]
  34:         self.current[i] += 1
  35:         self.res_per_route[i][0] = self.res_per_route[i][0] + self.A[i][0]
- 36:         self.res_per_route[i][1] = self.res_per_route[i][1] + self.A[i][1]
+ 36:         self.res_per_route[i][1] = self.res_per_route[i][1] - self.A[i][1]
  37:     
  38:     def one_more_route_i_fits(self, i):
  39:         return (self.A[i][0] <= self.rem1 and self.A[i][1] <= self.rem2)
  40:     
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 1]
[0, 0, 2]
[0, 1, 0]
[0, 1, 1]
[0, 1, 2]
[0, 2, 0]
[0, 2, 1]
[0, 3, 0]
[1, 0, 0]
[1, 0, 1]
[1, 0, 2]
[1, 1, 0]
[1, 1, 1]
[1, 2, 0]
[2, 0, 0]
[2, 0, 1]
[2, 1, 0]
[3, 0, 0]
[0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 0, 0, 0, 3]
[0, 0, 0, 0, 0, 0, 0, 4]
[0, 0, 0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 0, 0, 1, 1]
[0, 0, 0, 0, 0, 0, 1, 2]
[0, 0, 0, 0, 0, 0, 1, 3]
[0, 0, 0, 0, 0, 0, 2, 0]
[0, 0, 0, 0, 0, 0, 2, 1]
[0, 0, 0, 0, 0, 1, 0, 0]
[0, 0, 0, 0, 0, 1, 0, 1]
[0, 0, 0, 0, 0, 1, 0, 2]
[0, 0, 0, 0, 0, 1, 0, 3]
[0, 0, 0, 0, 0, 1, 1, 0]
[0, 0, 0, 0, 0, 1, 1, 1]
[0, 0, 0, 0, 0, 1, 1, 2]
[0, 0, 0, 0, 0, 1, 2, 0]
[0, 0, 0, 0, 0, 2, 0, 0]
[0, 0, 0, 0, 0, 2, 0, 1]
[0, 0, 0, 0, 0, 2, 0, 2]
[0, 0, 0, 0, 0, 2, 1, 0]
[0, 0, 0, 0, 0, 2, 1, 1]
[0, 0, 0, 0, 0, 3, 0, 0]
[0, 0, 0, 0, 0, 3, 0, 1]
[0, 0, 0, 0, 0, 3, 1, 0]
[0, 0, 0, 0, 0, 4, 0, 0]
[0, 0, 0, 0, 1, 0, 0, 0]
[0, 0, 0, 0, 1, 0, 0, 1]
[0, 0, 0, 0, 1, 0, 0, 2]
[0, 0, 0, 0, 1, 0, 1, 0]
[0, 0, 0, 0, 1, 0, 1, 1]
[0, 0, 0, 0, 1, 1, 0, 0]
[0, 0, 0, 0, 1, 1, 0, 1]
[0, 0, 0, 0, 1, 1, 1, 0]
[0, 0, 0, 0, 1, 2, 0, 0]
[0, 0, 0, 0, 2, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 0, 1]
[0, 0, 0, 1, 0, 0, 0, 2]
[0, 0, 0, 1, 0, 0, 0, 3]
[0, 0, 0, 1, 0, 0, 1, 0]
[0, 0, 0, 1, 0, 0, 1, 1]
[0, 0, 0, 1, 0, 0, 1, 2]
[0, 0, 0, 1, 0, 1, 0, 0]
[0, 0, 0, 1, 0, 1, 0, 1]
[0, 0, 0, 1, 0, 1, 0, 2]
[0, 0, 0, 1, 0, 1, 1, 0]
[0, 0, 0, 1, 0, 1, 1, 1]
[0, 0, 0, 1, 0, 2, 0, 0]
[0, 0, 0, 1, 0, 2, 0, 1]
[0, 0, 0, 1, 0, 2, 1, 0]
[0, 0, 0, 1, 0, 3, 0, 0]
[0, 0, 0, 1, 1, 0, 0, 0]
[0, 0, 0, 1, 1, 0, 0, 1]
[0, 0, 0, 1, 1, 0, 1, 0]
[0, 0, 0, 1, 1, 1, 0, 0]
[0, 0, 0, 2, 0, 0, 0, 0]
[0, 0, 0, 2, 0, 0, 0, 1]
[0, 0, 0, 2, 0, 0, 0, 2]
[0, 0, 0, 2, 0, 0, 1, 0]
[0, 0, 0, 2, 0, 1, 0, 0]
[0, 0, 0, 2, 0, 1, 0, 1]
[0, 0, 0, 2, 0, 2, 0, 0]
[0, 0, 0, 2, 1, 0, 0, 0]
[0, 0, 0, 3, 0, 0, 0, 0]
[0, 0, 0, 3, 0, 0, 0, 1]
[0, 0, 0, 3, 0, 1, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 1]
[0, 0, 1, 0, 0, 1, 0, 0]
[0, 1, 0, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 0, 1]
[1, 0, 0, 0, 0, 0, 1, 0]
[1, 0, 0, 0, 0, 1, 0, 0]
[1, 0, 0, 1, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0]
[0.00886 s] survived
   - [#   9] AOR S_x_v1: 
--------------------------------------------------------------------------------
  42:         for j in range(i, len(self.A)):
  43:             self.remove_all_routes_of_type_i(j)
  44:     
  45:     def remove_all_routes_of_type_i(self, i):
- 46:         self.rem1 += self.A[i][0] * self.current[i]
+ 46:         self.rem1 += self.A[i][0] / self.current[i]
  47:         self.rem2 += self.A[i][1] * self.current[i]
  48:         self.res_per_route[i][0] = 0
  49:         self.res_per_route[i][1] = 0
  50:         self.current[i] = 0
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 1]
[0, 0, 0, 2]
[0, 0, 0, 3]
[0, 0, 1, 0]
[0.00775 s] killed by test_does_not_exceed (tests_Sxv1.TestSx)
   - [#  10] AOR S_x_v1: 
--------------------------------------------------------------------------------
  42:         for j in range(i, len(self.A)):
  43:             self.remove_all_routes_of_type_i(j)
  44:     
  45:     def remove_all_routes_of_type_i(self, i):
- 46:         self.rem1 += self.A[i][0] * self.current[i]
+ 46:         self.rem1 += self.A[i][0] // self.current[i]
  47:         self.rem2 += self.A[i][1] * self.current[i]
  48:         self.res_per_route[i][0] = 0
  49:         self.res_per_route[i][1] = 0
  50:         self.current[i] = 0
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 0, 0, 1, 1]
[0, 0, 0, 0, 0, 0, 1, 2]
[0, 0, 0, 0, 0, 0, 2, 0]
[0.00831 s] killed by test_does_not_exceed (tests_Sxv1.TestSx)
   - [#  11] AOR S_x_v1: 
--------------------------------------------------------------------------------
  42:         for j in range(i, len(self.A)):
  43:             self.remove_all_routes_of_type_i(j)
  44:     
  45:     def remove_all_routes_of_type_i(self, i):
- 46:         self.rem1 += self.A[i][0] * self.current[i]
+ 46:         self.rem1 += self.A[i][0] ** self.current[i]
  47:         self.rem2 += self.A[i][1] * self.current[i]
  48:         self.res_per_route[i][0] = 0
  49:         self.res_per_route[i][1] = 0
  50:         self.current[i] = 0
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 1, 1]
[0, 0, 0, 0, 2, 0]
[0, 0, 0, 0, 3, 0]
[0.00786 s] killed by test_does_not_exceed (tests_Sxv1.TestSx)
   - [#  12] AOR S_x_v1: 
--------------------------------------------------------------------------------
  43:             self.remove_all_routes_of_type_i(j)
  44:     
  45:     def remove_all_routes_of_type_i(self, i):
  46:         self.rem1 += self.A[i][0] * self.current[i]
- 47:         self.rem2 += self.A[i][1] * self.current[i]
+ 47:         self.rem2 += self.A[i][1] / self.current[i]
  48:         self.res_per_route[i][0] = 0
  49:         self.res_per_route[i][1] = 0
  50:         self.current[i] = 0
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 1, 0]
[0.00810 s] killed by test_does_not_exceed (tests_Sxv1.TestSx)
   - [#  13] AOR S_x_v1: 
--------------------------------------------------------------------------------
  43:             self.remove_all_routes_of_type_i(j)
  44:     
  45:     def remove_all_routes_of_type_i(self, i):
  46:         self.rem1 += self.A[i][0] * self.current[i]
- 47:         self.rem2 += self.A[i][1] * self.current[i]
+ 47:         self.rem2 += self.A[i][1] // self.current[i]
  48:         self.res_per_route[i][0] = 0
  49:         self.res_per_route[i][1] = 0
  50:         self.current[i] = 0
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 1, 0]
[0.00825 s] killed by test_does_not_exceed (tests_Sxv1.TestSx)
   - [#  14] AOR S_x_v1: 
--------------------------------------------------------------------------------
  43:             self.remove_all_routes_of_type_i(j)
  44:     
  45:     def remove_all_routes_of_type_i(self, i):
  46:         self.rem1 += self.A[i][0] * self.current[i]
- 47:         self.rem2 += self.A[i][1] * self.current[i]
+ 47:         self.rem2 += self.A[i][1] ** self.current[i]
  48:         self.res_per_route[i][0] = 0
  49:         self.res_per_route[i][1] = 0
  50:         self.current[i] = 0
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 1]
[0, 0, 0, 0, 2]
[0, 0, 0, 0, 3]
[0, 0, 0, 1, 0]
[0, 0, 0, 1, 1]
[0, 0, 0, 1, 2]
[0, 0, 1, 0, 0]
[0, 0, 1, 0, 1]
[0, 1, 0, 0, 0]
[0, 1, 0, 0, 1]
[0, 1, 0, 0, 2]
[0, 2, 0, 0, 0]
[0, 3, 0, 0, 0]
[0, 4, 0, 0, 0]
[0, 5, 0, 0, 0]
[0, 6, 0, 0, 0]
[0, 7, 0, 0, 0]
[1, 0, 0, 0, 0]
[1, 0, 0, 0, 1]
[1, 0, 0, 0, 2]
[1, 0, 0, 0, 3]
[1, 0, 0, 1, 0]
[1, 0, 0, 1, 1]
[1, 0, 0, 1, 2]
[1, 0, 0, 2, 0]
[1, 0, 0, 2, 1]
[1, 0, 0, 2, 2]
[1, 0, 0, 3, 0]
[1, 0, 0, 3, 1]
[1, 0, 0, 4, 0]
[1, 0, 0, 4, 1]
[1, 0, 0, 5, 0]
[1, 0, 0, 6, 0]
[1, 0, 1, 0, 0]
[1, 0, 1, 0, 1]
[1, 0, 1, 0, 2]
[1, 0, 1, 1, 0]
[1, 0, 1, 1, 1]
[1, 0, 1, 2, 0]
[1, 0, 1, 2, 1]
[1, 0, 1, 3, 0]
[1, 0, 1, 4, 0]
[1, 0, 2, 0, 0]
[1, 0, 2, 0, 1]
[1, 0, 2, 1, 0]
[1, 0, 2, 2, 0]
[1, 0, 3, 0, 0]
[1, 1, 0, 0, 0]
[1, 1, 0, 0, 1]
[1, 1, 0, 0, 2]
[1, 1, 0, 1, 0]
[1, 1, 0, 1, 1]
[1, 1, 0, 1, 2]
[1, 1, 0, 2, 0]
[1, 1, 0, 2, 1]
[1, 1, 0, 3, 0]
[1, 1, 0, 3, 1]
[1, 1, 0, 4, 0]
[1, 1, 0, 5, 0]
[1, 1, 1, 0, 0]
[1, 1, 1, 0, 1]
[1, 1, 1, 1, 0]
[1, 1, 1, 1, 1]
[1, 1, 1, 2, 0]
[1, 1, 1, 3, 0]
[1, 1, 2, 0, 0]
[1, 1, 2, 1, 0]
[1, 2, 0, 0, 0]
[1, 2, 0, 0, 1]
[1, 2, 0, 0, 2]
[1, 2, 0, 1, 0]
[1, 2, 0, 1, 1]
[1, 2, 0, 2, 0]
[1, 2, 0, 2, 1]
[1, 2, 0, 3, 0]
[1, 2, 0, 4, 0]
[1, 2, 1, 0, 0]
[1, 2, 1, 0, 1]
[1, 2, 1, 1, 0]
[1, 2, 1, 2, 0]
[1, 2, 2, 0, 0]
[1, 3, 0, 0, 0]
[1, 3, 0, 0, 1]
[1, 3, 0, 1, 0]
[1, 3, 0, 1, 1]
[1, 3, 0, 2, 0]
[1, 3, 0, 3, 0]
[1, 3, 1, 0, 0]
[1, 3, 1, 1, 0]
[1, 4, 0, 0, 0]
[1, 4, 0, 0, 1]
[1, 4, 0, 1, 0]
[1, 4, 0, 2, 0]
[1, 4, 1, 0, 0]
[1, 5, 0, 0, 0]
[1, 5, 0, 1, 0]
[1, 6, 0, 0, 0]
[2, 0, 0, 0, 0]
[2, 0, 0, 0, 1]
[2, 0, 0, 0, 2]
[2, 0, 0, 1, 0]
[2, 0, 0, 1, 1]
[2, 0, 0, 1, 2]
[2, 0, 0, 2, 0]
[2, 0, 0, 2, 1]
[2, 0, 0, 3, 0]
[2, 0, 0, 3, 1]
[2, 0, 0, 4, 0]
[2, 0, 0, 5, 0]
[2, 0, 1, 0, 0]
[2, 0, 1, 0, 1]
[2, 0, 1, 1, 0]
[2, 0, 1, 1, 1]
[2, 0, 1, 2, 0]
[2, 0, 1, 3, 0]
[2, 0, 2, 0, 0]
[2, 0, 2, 1, 0]
[2, 1, 0, 0, 0]
[2, 1, 0, 0, 1]
[2, 1, 0, 0, 2]
[2, 1, 0, 1, 0]
[2, 1, 0, 1, 1]
[2, 1, 0, 2, 0]
[2, 1, 0, 2, 1]
[2, 1, 0, 3, 0]
[2, 1, 0, 4, 0]
[2, 1, 1, 0, 0]
[2, 1, 1, 0, 1]
[2, 1, 1, 1, 0]
[2, 1, 1, 2, 0]
[2, 1, 2, 0, 0]
[2, 2, 0, 0, 0]
[2, 2, 0, 0, 1]
[2, 2, 0, 1, 0]
[2, 2, 0, 1, 1]
[2, 2, 0, 2, 0]
[2, 2, 0, 3, 0]
[2, 2, 1, 0, 0]
[2, 2, 1, 1, 0]
[2, 3, 0, 0, 0]
[2, 3, 0, 0, 1]
[2, 3, 0, 1, 0]
[2, 3, 0, 2, 0]
[2, 3, 1, 0, 0]
[2, 4, 0, 0, 0]
[2, 4, 0, 1, 0]
[2, 5, 0, 0, 0]
[3, 0, 0, 0, 0]
[3, 0, 0, 0, 1]
[3, 0, 0, 0, 2]
[3, 0, 0, 1, 0]
[3, 0, 0, 1, 1]
[3, 0, 0, 2, 0]
[3, 0, 0, 2, 1]
[3, 0, 0, 3, 0]
[3, 0, 0, 4, 0]
[3, 0, 1, 0, 0]
[3, 0, 1, 0, 1]
[3, 0, 1, 1, 0]
[3, 0, 1, 2, 0]
[3, 0, 2, 0, 0]
[3, 1, 0, 0, 0]
[3, 1, 0, 0, 1]
[3, 1, 0, 1, 0]
[3, 1, 0, 1, 1]
[3, 1, 0, 2, 0]
[3, 1, 0, 3, 0]
[3, 1, 1, 0, 0]
[3, 1, 1, 1, 0]
[3, 2, 0, 0, 0]
[3, 2, 0, 0, 1]
[3, 2, 0, 1, 0]
[3, 2, 0, 2, 0]
[3, 2, 1, 0, 0]
[3, 3, 0, 0, 0]
[3, 3, 0, 1, 0]
[3, 4, 0, 0, 0]
[4, 0, 0, 0, 0]
[4, 0, 0, 0, 1]
[4, 0, 0, 1, 0]
[4, 0, 0, 1, 1]
[4, 0, 0, 2, 0]
[4, 0, 0, 3, 0]
[4, 0, 1, 0, 0]
[4, 0, 1, 1, 0]
[4, 1, 0, 0, 0]
[4, 1, 0, 0, 1]
[4, 1, 0, 1, 0]
[4, 1, 0, 2, 0]
[4, 1, 1, 0, 0]
[4, 2, 0, 0, 0]
[4, 2, 0, 1, 0]
[4, 3, 0, 0, 0]
[5, 0, 0, 0, 0]
[5, 0, 0, 0, 1]
[5, 0, 0, 1, 0]
[5, 0, 0, 2, 0]
[5, 0, 1, 0, 0]
[5, 1, 0, 0, 0]
[5, 1, 0, 1, 0]
[5, 2, 0, 0, 0]
[6, 0, 0, 0, 0]
[6, 0, 0, 1, 0]
[6, 1, 0, 0, 0]
[7, 0, 0, 0, 0]
[0, 0, 0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 0, 3]
[0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 1, 1]
[0, 0, 0, 0, 1, 2]
[0, 0, 0, 1, 0, 0]
[0, 0, 1, 0, 0, 0]
[0, 1, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 1]
[0, 1, 0, 0, 0, 2]
[1, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0]
[0.02530 s] survived
   - [#  15] ASR S_x_v1: 
--------------------------------------------------------------------------------
  17:             return self.current
  18:         else:
  19:             self.remove_all_routes_of_type_i(self.route)
  20:             while self.route > 0:
- 21:                 self.route -= 1
+ 21:                 self.route += 1
  22:                 if self.one_more_route_i_fits(self.route):
  23:                     self.add_one_more_route_i(self.route)
  24:                     self.route = len(self.A) - 1
  25:                     return self.current
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 0, 0, 2]
[0.00817 s] killed by test_does_not_exceed (tests_Sxv1.TestSx)
   - [#  16] ASR S_x_v1: 
--------------------------------------------------------------------------------
  28:             self.route = len(self.A) - 1
  29:             return self.current
  30:     
  31:     def add_one_more_route_i(self, i):
- 32:         self.rem1 -= self.A[i][0]
+ 32:         self.rem1 += self.A[i][0]
  33:         self.rem2 -= self.A[i][1]
  34:         self.current[i] += 1
  35:         self.res_per_route[i][0] = self.res_per_route[i][0] + self.A[i][0]
  36:         self.res_per_route[i][1] = self.res_per_route[i][1] + self.A[i][1]
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 0, 0, 1, 1]
[0, 0, 0, 0, 0, 0, 2, 0]
[0, 0, 0, 0, 0, 1, 0, 0]
[0, 0, 0, 0, 0, 1, 0, 1]
[0, 0, 0, 0, 0, 1, 1, 0]
[0, 0, 0, 0, 0, 2, 0, 0]
[0, 0, 0, 0, 1, 0, 0, 0]
[0, 0, 0, 0, 1, 0, 0, 1]
[0, 0, 0, 0, 1, 0, 1, 0]
[0, 0, 0, 0, 1, 1, 0, 0]
[0, 0, 0, 0, 2, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 0, 1]
[0, 0, 0, 1, 0, 0, 1, 0]
[0, 0, 0, 1, 0, 1, 0, 0]
[0, 0, 0, 1, 1, 0, 0, 0]
[0, 0, 0, 2, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 1]
[0, 0, 1, 0, 0, 0, 1, 0]
[0, 0, 1, 0, 0, 1, 0, 0]
[0, 0, 1, 0, 1, 0, 0, 0]
[0, 0, 1, 1, 0, 0, 0, 0]
[0, 0, 2, 0, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0, 0, 1]
[0, 1, 0, 0, 0, 0, 1, 0]
[0, 1, 0, 0, 0, 1, 0, 0]
[0, 1, 0, 0, 1, 0, 0, 0]
[0, 1, 0, 1, 0, 0, 0, 0]
[0, 1, 1, 0, 0, 0, 0, 0]
[0, 2, 0, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 0, 1]
[1, 0, 0, 0, 0, 0, 1, 0]
[1, 0, 0, 0, 0, 1, 0, 0]
[1, 0, 0, 0, 1, 0, 0, 0]
[1, 0, 0, 1, 0, 0, 0, 0]
[1, 0, 1, 0, 0, 0, 0, 0]
[1, 1, 0, 0, 0, 0, 0, 0]
[2, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 1]
[0, 0, 0, 2]
[0, 0, 1, 0]
[0, 1, 0, 0]
[1, 0, 0, 0]
[1, 0, 0, 1]
[1, 0, 1, 0]
[1, 1, 0, 0]
[2, 0, 0, 0]
[0.01015 s] killed by test_more_than_half (tests_Sxv1.TestSx)
   - [#  17] ASR S_x_v1: 
--------------------------------------------------------------------------------
  29:             return self.current
  30:     
  31:     def add_one_more_route_i(self, i):
  32:         self.rem1 -= self.A[i][0]
- 33:         self.rem2 -= self.A[i][1]
+ 33:         self.rem2 += self.A[i][1]
  34:         self.current[i] += 1
  35:         self.res_per_route[i][0] = self.res_per_route[i][0] + self.A[i][0]
  36:         self.res_per_route[i][1] = self.res_per_route[i][1] + self.A[i][1]
  37:     
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 0, 3]
[0, 0, 0, 0, 0, 4]
[0, 0, 0, 0, 0, 5]
[0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 1, 1]
[0, 0, 0, 0, 1, 2]
[0, 0, 0, 0, 1, 3]
[0, 0, 0, 0, 1, 4]
[0, 0, 0, 0, 2, 0]
[0, 0, 0, 0, 2, 1]
[0, 0, 0, 0, 2, 2]
[0, 0, 0, 0, 2, 3]
[0, 0, 0, 0, 3, 0]
[0, 0, 0, 0, 3, 1]
[0, 0, 0, 0, 3, 2]
[0, 0, 0, 0, 4, 0]
[0, 0, 0, 0, 4, 1]
[0, 0, 0, 0, 5, 0]
[0, 0, 0, 1, 0, 0]
[0, 0, 0, 1, 0, 1]
[0, 0, 0, 1, 0, 2]
[0, 0, 0, 1, 0, 3]
[0, 0, 0, 1, 0, 4]
[0, 0, 0, 1, 1, 0]
[0, 0, 0, 1, 1, 1]
[0, 0, 0, 1, 1, 2]
[0, 0, 0, 1, 1, 3]
[0, 0, 0, 1, 2, 0]
[0, 0, 0, 1, 2, 1]
[0, 0, 0, 1, 2, 2]
[0, 0, 0, 1, 3, 0]
[0, 0, 0, 1, 3, 1]
[0, 0, 0, 1, 4, 0]
[0, 0, 0, 2, 0, 0]
[0, 0, 0, 2, 0, 1]
[0, 0, 0, 2, 0, 2]
[0, 0, 0, 2, 0, 3]
[0, 0, 0, 2, 1, 0]
[0, 0, 0, 2, 1, 1]
[0, 0, 0, 2, 1, 2]
[0, 0, 0, 2, 2, 0]
[0, 0, 0, 2, 2, 1]
[0, 0, 0, 2, 3, 0]
[0, 0, 0, 3, 0, 0]
[0, 0, 0, 3, 0, 1]
[0, 0, 0, 3, 0, 2]
[0, 0, 0, 3, 1, 0]
[0, 0, 0, 3, 1, 1]
[0, 0, 0, 3, 2, 0]
[0, 0, 0, 4, 0, 0]
[0, 0, 0, 4, 0, 1]
[0, 0, 0, 4, 1, 0]
[0, 0, 0, 5, 0, 0]
[0, 0, 1, 0, 0, 0]
[0, 0, 1, 0, 0, 1]
[0, 0, 1, 0, 0, 2]
[0, 0, 1, 0, 0, 3]
[0, 0, 1, 0, 1, 0]
[0, 0, 1, 0, 1, 1]
[0, 0, 1, 0, 1, 2]
[0, 0, 1, 0, 2, 0]
[0, 0, 1, 0, 2, 1]
[0, 0, 1, 0, 3, 0]
[0, 0, 1, 1, 0, 0]
[0, 0, 1, 1, 0, 1]
[0, 0, 1, 1, 0, 2]
[0, 0, 1, 1, 1, 0]
[0, 0, 1, 1, 1, 1]
[0, 0, 1, 1, 2, 0]
[0, 0, 1, 2, 0, 0]
[0, 0, 1, 2, 0, 1]
[0, 0, 1, 2, 1, 0]
[0, 0, 1, 3, 0, 0]
[0, 0, 2, 0, 0, 0]
[0, 0, 2, 0, 0, 1]
[0, 0, 2, 0, 1, 0]
[0, 0, 2, 1, 0, 0]
[0, 1, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 1]
[0, 1, 0, 0, 0, 2]
[0, 1, 0, 0, 0, 3]
[0, 1, 0, 0, 1, 0]
[0, 1, 0, 0, 1, 1]
[0, 1, 0, 0, 1, 2]
[0, 1, 0, 0, 2, 0]
[0, 1, 0, 0, 2, 1]
[0, 1, 0, 0, 3, 0]
[0, 1, 0, 1, 0, 0]
[0, 1, 0, 1, 0, 1]
[0, 1, 0, 1, 0, 2]
[0, 1, 0, 1, 1, 0]
[0, 1, 0, 1, 1, 1]
[0, 1, 0, 1, 2, 0]
[0, 1, 0, 2, 0, 0]
[0, 1, 0, 2, 0, 1]
[0, 1, 0, 2, 1, 0]
[0, 1, 0, 3, 0, 0]
[0, 1, 1, 0, 0, 0]
[0, 1, 1, 0, 0, 1]
[0, 1, 1, 0, 1, 0]
[0, 1, 1, 1, 0, 0]
[0, 2, 0, 0, 0, 0]
[0, 2, 0, 0, 0, 1]
[0, 2, 0, 0, 1, 0]
[0, 2, 0, 1, 0, 0]
[1, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 1]
[1, 0, 0, 0, 0, 2]
[1, 0, 0, 0, 0, 3]
[1, 0, 0, 0, 1, 0]
[1, 0, 0, 0, 1, 1]
[1, 0, 0, 0, 1, 2]
[1, 0, 0, 0, 2, 0]
[1, 0, 0, 0, 2, 1]
[1, 0, 0, 0, 3, 0]
[1, 0, 0, 1, 0, 0]
[1, 0, 0, 1, 0, 1]
[1, 0, 0, 1, 0, 2]
[1, 0, 0, 1, 1, 0]
[1, 0, 0, 1, 1, 1]
[1, 0, 0, 1, 2, 0]
[1, 0, 0, 2, 0, 0]
[1, 0, 0, 2, 0, 1]
[1, 0, 0, 2, 1, 0]
[1, 0, 0, 3, 0, 0]
[1, 0, 1, 0, 0, 0]
[1, 0, 1, 0, 0, 1]
[1, 0, 1, 0, 1, 0]
[1, 0, 1, 1, 0, 0]
[1, 1, 0, 0, 0, 0]
[1, 1, 0, 0, 0, 1]
[1, 1, 0, 0, 1, 0]
[1, 1, 0, 1, 0, 0]
[2, 0, 0, 0, 0, 0]
[2, 0, 0, 0, 0, 1]
[2, 0, 0, 0, 1, 0]
[2, 0, 0, 1, 0, 0]
[0, 0, 0, 0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 1]
[0, 1, 0]
[0, 1, 1]
[0, 2, 0]
[0.01861 s] killed by test_more_than_half (tests_Sxv1.TestSx)
   - [#  18] ASR S_x_v1: 
--------------------------------------------------------------------------------
  30:     
  31:     def add_one_more_route_i(self, i):
  32:         self.rem1 -= self.A[i][0]
  33:         self.rem2 -= self.A[i][1]
- 34:         self.current[i] += 1
+ 34:         self.current[i] -= 1
  35:         self.res_per_route[i][0] = self.res_per_route[i][0] + self.A[i][0]
  36:         self.res_per_route[i][1] = self.res_per_route[i][1] + self.A[i][1]
  37:     
  38:     def one_more_route_i_fits(self, i):
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 0, -1]
[0, 0, 0, 0, 0, 0, -2]
[0, 0, 0, 0, 0, 0, -3]
[0, 0, 0, 0, 0, 0, -4]
[0, 0, 0, 0, 0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, -1]
[0, 0, 0, 0, 0, -2]
[0, 0, 0, 0, 0, 0]
[0.00747 s] survived
   - [#  19] ASR S_x_v1: 
--------------------------------------------------------------------------------
  42:         for j in range(i, len(self.A)):
  43:             self.remove_all_routes_of_type_i(j)
  44:     
  45:     def remove_all_routes_of_type_i(self, i):
- 46:         self.rem1 += self.A[i][0] * self.current[i]
+ 46:         self.rem1 -= self.A[i][0] * self.current[i]
  47:         self.rem2 += self.A[i][1] * self.current[i]
  48:         self.res_per_route[i][0] = 0
  49:         self.res_per_route[i][1] = 0
  50:         self.current[i] = 0
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 0, 0]
[0.00747 s] survived
   - [#  20] ASR S_x_v1: 
--------------------------------------------------------------------------------
  43:             self.remove_all_routes_of_type_i(j)
  44:     
  45:     def remove_all_routes_of_type_i(self, i):
  46:         self.rem1 += self.A[i][0] * self.current[i]
- 47:         self.rem2 += self.A[i][1] * self.current[i]
+ 47:         self.rem2 -= self.A[i][1] * self.current[i]
  48:         self.res_per_route[i][0] = 0
  49:         self.res_per_route[i][1] = 0
  50:         self.current[i] = 0
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 1]
[0, 0, 0, 2]
[0, 0, 0, 3]
[0, 0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 1]
[0, 0, 0, 0, 2]
[0, 0, 0, 0, 3]
[0, 0, 0, 0, 0]
[0.00701 s] survived
   - [#  21] COI S_x_v1: 
--------------------------------------------------------------------------------
  11:         self.rem2 = X[1]
  12:         self.res_per_route = [[0, 0] for x in range(len(A))]
  13:     
  14:     def get_next(self):
- 15:         if self.one_more_route_i_fits(self.route):
+ 15:         if not (self.one_more_route_i_fits(self.route)):
  16:             self.add_one_more_route_i(self.route)
  17:             return self.current
  18:         else:
  19:             self.remove_all_routes_of_type_i(self.route)
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 0, 2, 0]
[0, 0, 0, 0, 0, 3, 0]
[0, 0, 0, 0, 0, 3, 1]
[0.00808 s] killed by test_does_not_exceed (tests_Sxv1.TestSx)
   - [#  22] COI S_x_v1: 
--------------------------------------------------------------------------------
  16:             self.add_one_more_route_i(self.route)
  17:             return self.current
  18:         else:
  19:             self.remove_all_routes_of_type_i(self.route)
- 20:             while self.route > 0:
+ 20:             while not (self.route > 0):
  21:                 self.route -= 1
  22:                 if self.one_more_route_i_fits(self.route):
  23:                     self.add_one_more_route_i(self.route)
  24:                     self.route = len(self.A) - 1
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 1]
[0, 0, 2]
[0, 0, 3]
[0, 0, 4]
[0, 0, 5]
[0, 0, 6]
[0, 0, 7]
[0, 0, 8]
[0, 0, 9]
[0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 0, 0, 3]
[0, 0, 0, 0, 0, 0, 4]
[0, 0, 0, 0, 0, 0, 0]
[0.00718 s] survived
   - [#  23] COI S_x_v1: 
--------------------------------------------------------------------------------
  18:         else:
  19:             self.remove_all_routes_of_type_i(self.route)
  20:             while self.route > 0:
  21:                 self.route -= 1
- 22:                 if self.one_more_route_i_fits(self.route):
+ 22:                 if not (self.one_more_route_i_fits(self.route)):
  23:                     self.add_one_more_route_i(self.route)
  24:                     self.route = len(self.A) - 1
  25:                     return self.current
  26:                 else:
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 0, 0, 0, 3]
[0, 0, 0, 0, 0, 0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 1]
[0, 0, 0, 2]
[0, 0, 0, 0]
[0.00750 s] survived
   - [#  24] CRP S_x_v1: 
--------------------------------------------------------------------------------
   4:     def __init__(self, A, X):
   5:         self.A = A
   6:         self.X = X
   7:         
-  8:         self.current = [0] * len(A)
+  8:         self.current = [1] * len(A)
   9:         self.route = len(A) - 1
  10:         self.rem1 = X[0]
  11:         self.rem2 = X[1]
  12:         self.res_per_route = [[0, 0] for x in range(len(A))]
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[1, 1, 1, 1, 1, 2]
[0.00763 s] killed by test_does_not_exceed (tests_Sxv1.TestSx)
   - [#  25] CRP S_x_v1: 
--------------------------------------------------------------------------------
   5:         self.A = A
   6:         self.X = X
   7:         
   8:         self.current = [0] * len(A)
-  9:         self.route = len(A) - 1
+  9:         self.route = len(A) - 2
  10:         self.rem1 = X[0]
  11:         self.rem2 = X[1]
  12:         self.res_per_route = [[0, 0] for x in range(len(A))]
  13:     
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 0, 2, 0]
[0, 0, 0, 0, 1, 0, 0]
[0, 0, 0, 0, 1, 0, 1]
[0, 0, 0, 0, 1, 1, 0]
[0, 0, 0, 0, 2, 0, 0]
[0, 0, 0, 1, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 1]
[0, 0, 0, 1, 0, 1, 0]
[0, 0, 0, 1, 1, 0, 0]
[0, 0, 0, 2, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 1]
[0, 0, 1, 0, 0, 1, 0]
[0, 0, 1, 0, 1, 0, 0]
[0, 0, 1, 1, 0, 0, 0]
[0, 0, 2, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0, 1]
[0, 1, 0, 0, 0, 1, 0]
[0, 1, 0, 0, 1, 0, 0]
[0, 1, 0, 1, 0, 0, 0]
[0, 1, 1, 0, 0, 0, 0]
[0, 2, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 1]
[1, 0, 0, 0, 0, 0, 2]
[1, 0, 0, 0, 0, 1, 0]
[1, 0, 0, 0, 1, 0, 0]
[1, 0, 0, 1, 0, 0, 0]
[1, 0, 1, 0, 0, 0, 0]
[1, 1, 0, 0, 0, 0, 0]
[2, 0, 0, 0, 0, 0, 0]
[2, 0, 0, 0, 0, 0, 1]
[2, 0, 0, 0, 1, 0, 0]
[2, 0, 0, 1, 0, 0, 0]
[3, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 2, 0]
[0, 0, 0, 1, 0, 0]
[0, 0, 0, 1, 0, 1]
[0, 0, 0, 1, 0, 2]
[0, 0, 0, 1, 1, 0]
[0, 0, 0, 1, 1, 1]
[0, 0, 0, 2, 0, 0]
[0, 0, 0, 2, 0, 1]
[0, 0, 0, 2, 1, 0]
[0, 0, 0, 3, 0, 0]
[0, 0, 1, 0, 0, 0]
[0, 1, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0]
[1, 0, 0, 1, 0, 0]
[0, 0, 0, 0, 0, 0]
[0.00920 s] survived
   - [#  26] CRP S_x_v1: 
--------------------------------------------------------------------------------
   6:         self.X = X
   7:         
   8:         self.current = [0] * len(A)
   9:         self.route = len(A) - 1
- 10:         self.rem1 = X[0]
+ 10:         self.rem1 = X[1]
  11:         self.rem2 = X[1]
  12:         self.res_per_route = [[0, 0] for x in range(len(A))]
  13:     
  14:     def get_next(self):
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 0, 0, 0, 3]
[0, 0, 0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 0, 0, 1, 1]
[0, 0, 0, 0, 0, 0, 1, 2]
[0, 0, 0, 0, 0, 0, 2, 0]
[0, 0, 0, 0, 0, 0, 2, 1]
[0, 0, 0, 0, 0, 0, 3, 0]
[0, 0, 0, 0, 0, 1, 0, 0]
[0, 0, 0, 0, 0, 1, 0, 1]
[0, 0, 0, 0, 0, 1, 1, 0]
[0, 0, 0, 0, 0, 2, 0, 0]
[0, 0, 0, 0, 1, 0, 0, 0]
[0, 0, 0, 0, 1, 0, 0, 1]
[0, 0, 0, 0, 1, 0, 0, 2]
[0, 0, 0, 0, 1, 0, 1, 0]
[0, 0, 0, 0, 1, 0, 1, 1]
[0, 0, 0, 0, 1, 0, 2, 0]
[0, 0, 0, 0, 1, 1, 0, 0]
[0, 0, 0, 0, 2, 0, 0, 0]
[0, 0, 0, 0, 2, 0, 0, 1]
[0, 0, 0, 0, 2, 0, 1, 0]
[0, 0, 0, 0, 3, 0, 0, 0]
[0.00844 s] killed by test_does_not_exceed (tests_Sxv1.TestSx)
   - [#  27] CRP S_x_v1: 
--------------------------------------------------------------------------------
   7:         
   8:         self.current = [0] * len(A)
   9:         self.route = len(A) - 1
  10:         self.rem1 = X[0]
- 11:         self.rem2 = X[1]
+ 11:         self.rem2 = X[2]
  12:         self.res_per_route = [[0, 0] for x in range(len(A))]
  13:     
  14:     def get_next(self):
  15:         if self.one_more_route_i_fits(self.route):
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0.00773 s] killed by test_does_not_exceed (tests_Sxv1.TestSx)
   - [#  28] CRP S_x_v1: 
--------------------------------------------------------------------------------
   8:         self.current = [0] * len(A)
   9:         self.route = len(A) - 1
  10:         self.rem1 = X[0]
  11:         self.rem2 = X[1]
- 12:         self.res_per_route = [[0, 0] for x in range(len(A))]
+ 12:         self.res_per_route = [[1, 0] for x in range(len(A))]
  13:     
  14:     def get_next(self):
  15:         if self.one_more_route_i_fits(self.route):
  16:             self.add_one_more_route_i(self.route)
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 0, 3]
[0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 1, 1]
[0, 0, 0, 0, 2, 0]
[0, 0, 0, 1, 0, 0]
[0, 0, 0, 1, 0, 1]
[0, 0, 0, 1, 0, 2]
[0, 0, 0, 1, 1, 0]
[0, 0, 0, 1, 1, 1]
[0, 0, 0, 2, 0, 0]
[0, 0, 1, 0, 0, 0]
[0, 0, 1, 0, 0, 1]
[0, 0, 1, 0, 0, 2]
[0, 0, 1, 0, 1, 0]
[0, 0, 1, 1, 0, 0]
[0, 0, 1, 1, 0, 1]
[0, 0, 2, 0, 0, 0]
[0, 0, 2, 0, 0, 1]
[0, 1, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 1]
[0, 1, 0, 0, 0, 2]
[0, 1, 0, 0, 1, 0]
[0, 1, 0, 0, 1, 1]
[0, 1, 0, 1, 0, 0]
[0, 1, 0, 1, 0, 1]
[0, 1, 0, 1, 0, 2]
[0, 1, 0, 1, 1, 0]
[0, 1, 1, 0, 0, 0]
[0, 1, 1, 0, 0, 1]
[0, 1, 1, 0, 1, 0]
[0, 1, 1, 1, 0, 0]
[0, 1, 2, 0, 0, 0]
[0, 2, 0, 0, 0, 0]
[0, 2, 0, 0, 0, 1]
[0, 2, 0, 0, 0, 2]
[0, 2, 0, 0, 1, 0]
[0, 2, 0, 1, 0, 0]
[0, 2, 0, 1, 0, 1]
[0, 2, 0, 1, 1, 0]
[0, 2, 1, 0, 0, 0]
[0, 2, 1, 0, 0, 1]
[0, 2, 2, 0, 0, 0]
[0, 3, 0, 0, 0, 0]
[0, 3, 0, 0, 0, 1]
[0, 3, 0, 0, 1, 0]
[0, 3, 0, 1, 0, 0]
[0, 3, 0, 1, 0, 1]
[0, 3, 1, 0, 0, 0]
[0, 4, 0, 0, 0, 0]
[0, 4, 0, 0, 0, 1]
[0, 4, 0, 1, 0, 0]
[0, 4, 1, 0, 0, 0]
[0, 5, 0, 0, 0, 0]
[0, 5, 0, 1, 0, 0]
[0, 6, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 1]
[1, 0, 0, 0, 0, 2]
[1, 0, 0, 0, 1, 0]
[1, 0, 0, 1, 0, 0]
[1, 0, 0, 1, 0, 1]
[1, 0, 1, 0, 0, 0]
[1, 0, 1, 0, 0, 1]
[1, 1, 0, 0, 0, 0]
[1, 1, 0, 0, 0, 1]
[1, 1, 0, 0, 1, 0]
[1, 1, 0, 1, 0, 0]
[1, 1, 1, 0, 0, 0]
[1, 2, 0, 0, 0, 0]
[1, 2, 0, 0, 0, 1]
[1, 2, 1, 0, 0, 0]
[1, 3, 0, 0, 0, 0]
[1, 4, 0, 0, 0, 0]
[2, 0, 0, 0, 0, 0]
[2, 0, 0, 0, 0, 1]
[2, 1, 0, 0, 0, 0]
[2, 2, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 1]
[0, 0, 0, 0, 2]
[0, 0, 0, 1, 0]
[0, 0, 0, 1, 1]
[0, 0, 0, 2, 0]
[0, 0, 0, 2, 1]
[0, 0, 0, 3, 0]
[0, 0, 0, 3, 1]
[0, 0, 0, 4, 0]
[0, 0, 0, 5, 0]
[0, 0, 0, 6, 0]
[0, 0, 1, 0, 0]
[0, 0, 1, 1, 0]
[0, 1, 0, 0, 0]
[0, 1, 0, 1, 0]
[0, 1, 0, 2, 0]
[1, 0, 0, 0, 0]
[1, 0, 0, 0, 1]
[1, 0, 0, 1, 0]
[1, 0, 0, 1, 1]
[1, 0, 0, 2, 0]
[0, 0, 0, 0, 0]
[0.01111 s] survived
   - [#  29] CRP S_x_v1: 
--------------------------------------------------------------------------------
   8:         self.current = [0] * len(A)
   9:         self.route = len(A) - 1
  10:         self.rem1 = X[0]
  11:         self.rem2 = X[1]
- 12:         self.res_per_route = [[0, 0] for x in range(len(A))]
+ 12:         self.res_per_route = [[0, 1] for x in range(len(A))]
  13:     
  14:     def get_next(self):
  15:         if self.one_more_route_i_fits(self.route):
  16:             self.add_one_more_route_i(self.route)
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 0, 0, 0, 3]
[0, 0, 0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 0, 0, 1, 1]
[0, 0, 0, 0, 0, 0, 1, 2]
[0, 0, 0, 0, 0, 0, 2, 0]
[0, 0, 0, 0, 0, 0, 2, 1]
[0, 0, 0, 0, 0, 0, 3, 0]
[0, 0, 0, 0, 0, 1, 0, 0]
[0, 0, 0, 0, 0, 1, 0, 1]
[0, 0, 0, 0, 0, 1, 0, 2]
[0, 0, 0, 0, 0, 1, 1, 0]
[0, 0, 0, 0, 0, 1, 1, 1]
[0, 0, 0, 0, 0, 1, 2, 0]
[0, 0, 0, 0, 0, 2, 0, 0]
[0, 0, 0, 0, 0, 2, 0, 1]
[0, 0, 0, 0, 0, 2, 1, 0]
[0, 0, 0, 0, 0, 3, 0, 0]
[0, 0, 0, 0, 1, 0, 0, 0]
[0, 0, 0, 0, 1, 0, 0, 1]
[0, 0, 0, 0, 1, 0, 0, 2]
[0, 0, 0, 0, 1, 0, 1, 0]
[0, 0, 0, 0, 1, 0, 1, 1]
[0, 0, 0, 0, 1, 0, 2, 0]
[0, 0, 0, 0, 1, 1, 0, 0]
[0, 0, 0, 0, 1, 1, 0, 1]
[0, 0, 0, 0, 1, 1, 1, 0]
[0, 0, 0, 0, 1, 2, 0, 0]
[0, 0, 0, 0, 2, 0, 0, 0]
[0, 0, 0, 0, 2, 0, 0, 1]
[0, 0, 0, 0, 2, 0, 1, 0]
[0, 0, 0, 0, 2, 1, 0, 0]
[0, 0, 0, 0, 3, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 0, 1]
[0, 0, 0, 1, 0, 0, 0, 2]
[0, 0, 0, 1, 0, 0, 1, 0]
[0, 0, 0, 1, 0, 0, 1, 1]
[0, 0, 0, 1, 0, 0, 2, 0]
[0, 0, 0, 1, 0, 1, 0, 0]
[0, 0, 0, 1, 0, 1, 0, 1]
[0, 0, 0, 1, 0, 1, 1, 0]
[0, 0, 0, 1, 0, 2, 0, 0]
[0, 0, 0, 1, 1, 0, 0, 0]
[0, 0, 0, 1, 1, 0, 0, 1]
[0, 0, 0, 1, 1, 0, 1, 0]
[0, 0, 0, 1, 1, 1, 0, 0]
[0, 0, 0, 1, 2, 0, 0, 0]
[0, 0, 0, 2, 0, 0, 0, 0]
[0, 0, 0, 2, 0, 0, 0, 1]
[0, 0, 0, 2, 0, 0, 1, 0]
[0, 0, 0, 2, 0, 1, 0, 0]
[0, 0, 0, 2, 1, 0, 0, 0]
[0, 0, 0, 3, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 1]
[0, 0, 1, 0, 0, 0, 0, 2]
[0, 0, 1, 0, 0, 0, 1, 0]
[0, 0, 1, 0, 0, 0, 1, 1]
[0, 0, 1, 0, 0, 0, 2, 0]
[0, 0, 1, 0, 0, 1, 0, 0]
[0, 0, 1, 0, 0, 1, 0, 1]
[0, 0, 1, 0, 0, 1, 1, 0]
[0, 0, 1, 0, 0, 2, 0, 0]
[0, 0, 1, 0, 1, 0, 0, 0]
[0, 0, 1, 0, 1, 0, 0, 1]
[0, 0, 1, 0, 1, 0, 1, 0]
[0, 0, 1, 0, 1, 1, 0, 0]
[0, 0, 1, 0, 2, 0, 0, 0]
[0, 0, 1, 1, 0, 0, 0, 0]
[0, 0, 1, 1, 0, 0, 0, 1]
[0, 0, 1, 1, 0, 0, 1, 0]
[0, 0, 1, 1, 0, 1, 0, 0]
[0, 0, 1, 1, 1, 0, 0, 0]
[0, 0, 1, 2, 0, 0, 0, 0]
[0, 0, 2, 0, 0, 0, 0, 0]
[0, 0, 2, 0, 0, 0, 0, 1]
[0, 0, 2, 0, 0, 0, 1, 0]
[0, 0, 2, 0, 0, 1, 0, 0]
[0, 0, 2, 0, 1, 0, 0, 0]
[0, 0, 2, 1, 0, 0, 0, 0]
[0, 0, 3, 0, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0, 0, 1]
[0, 1, 0, 0, 0, 0, 0, 2]
[0, 1, 0, 0, 0, 0, 1, 0]
[0, 1, 0, 0, 0, 0, 1, 1]
[0, 1, 0, 0, 0, 0, 2, 0]
[0, 1, 0, 0, 0, 1, 0, 0]
[0, 1, 0, 0, 0, 1, 0, 1]
[0, 1, 0, 0, 0, 1, 1, 0]
[0, 1, 0, 0, 0, 2, 0, 0]
[0, 1, 0, 0, 1, 0, 0, 0]
[0, 1, 0, 0, 1, 0, 0, 1]
[0, 1, 0, 0, 1, 0, 1, 0]
[0, 1, 0, 0, 1, 1, 0, 0]
[0, 1, 0, 0, 2, 0, 0, 0]
[0, 1, 0, 1, 0, 0, 0, 0]
[0, 1, 0, 1, 0, 0, 0, 1]
[0, 1, 0, 1, 0, 0, 1, 0]
[0, 1, 0, 1, 0, 1, 0, 0]
[0, 1, 0, 1, 1, 0, 0, 0]
[0, 1, 0, 2, 0, 0, 0, 0]
[0, 1, 1, 0, 0, 0, 0, 0]
[0, 1, 1, 0, 0, 0, 0, 1]
[0, 1, 1, 0, 0, 0, 1, 0]
[0, 1, 1, 0, 0, 1, 0, 0]
[0, 1, 1, 0, 1, 0, 0, 0]
[0, 1, 1, 1, 0, 0, 0, 0]
[0, 1, 2, 0, 0, 0, 0, 0]
[0, 2, 0, 0, 0, 0, 0, 0]
[0, 2, 0, 0, 0, 0, 0, 1]
[0, 2, 0, 0, 0, 0, 1, 0]
[0, 2, 0, 0, 0, 1, 0, 0]
[0, 2, 0, 0, 1, 0, 0, 0]
[0, 2, 0, 1, 0, 0, 0, 0]
[0, 2, 1, 0, 0, 0, 0, 0]
[0, 3, 0, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 0, 1]
[1, 0, 0, 0, 0, 0, 0, 2]
[1, 0, 0, 0, 0, 0, 1, 0]
[1, 0, 0, 0, 0, 0, 1, 1]
[1, 0, 0, 0, 0, 0, 2, 0]
[1, 0, 0, 0, 0, 1, 0, 0]
[1, 0, 0, 0, 0, 1, 0, 1]
[1, 0, 0, 0, 0, 1, 1, 0]
[1, 0, 0, 0, 0, 2, 0, 0]
[1, 0, 0, 0, 1, 0, 0, 0]
[1, 0, 0, 0, 1, 0, 0, 1]
[1, 0, 0, 0, 1, 0, 1, 0]
[1, 0, 0, 0, 1, 1, 0, 0]
[1, 0, 0, 0, 2, 0, 0, 0]
[1, 0, 0, 1, 0, 0, 0, 0]
[1, 0, 0, 1, 0, 0, 0, 1]
[1, 0, 0, 1, 0, 0, 1, 0]
[1, 0, 0, 1, 0, 1, 0, 0]
[1, 0, 0, 1, 1, 0, 0, 0]
[1, 0, 0, 2, 0, 0, 0, 0]
[1, 0, 1, 0, 0, 0, 0, 0]
[1, 0, 1, 0, 0, 0, 0, 1]
[1, 0, 1, 0, 0, 0, 1, 0]
[1, 0, 1, 0, 0, 1, 0, 0]
[1, 0, 1, 0, 1, 0, 0, 0]
[1, 0, 1, 1, 0, 0, 0, 0]
[1, 0, 2, 0, 0, 0, 0, 0]
[1, 1, 0, 0, 0, 0, 0, 0]
[1, 1, 0, 0, 0, 0, 0, 1]
[1, 1, 0, 0, 0, 0, 1, 0]
[1, 1, 0, 0, 0, 1, 0, 0]
[1, 1, 0, 0, 1, 0, 0, 0]
[1, 1, 0, 1, 0, 0, 0, 0]
[1, 1, 1, 0, 0, 0, 0, 0]
[1, 2, 0, 0, 0, 0, 0, 0]
[2, 0, 0, 0, 0, 0, 0, 0]
[2, 0, 0, 0, 0, 0, 0, 1]
[2, 0, 0, 0, 0, 0, 1, 0]
[2, 0, 0, 0, 0, 1, 0, 0]
[2, 0, 0, 0, 1, 0, 0, 0]
[2, 0, 0, 1, 0, 0, 0, 0]
[2, 0, 1, 0, 0, 0, 0, 0]
[2, 1, 0, 0, 0, 0, 0, 0]
[3, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 1]
[0, 1, 0]
[1, 0, 0]
[0, 0, 0]
[0.02311 s] survived
   - [#  30] CRP S_x_v1: 
--------------------------------------------------------------------------------
  16:             self.add_one_more_route_i(self.route)
  17:             return self.current
  18:         else:
  19:             self.remove_all_routes_of_type_i(self.route)
- 20:             while self.route > 0:
+ 20:             while self.route > 1:
  21:                 self.route -= 1
  22:                 if self.one_more_route_i_fits(self.route):
  23:                     self.add_one_more_route_i(self.route)
  24:                     self.route = len(self.A) - 1
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 1]
[0, 0, 0, 0, 2]
[0, 0, 0, 1, 0]
[0, 0, 0, 1, 1]
[0, 0, 0, 2, 0]
[0, 0, 0, 2, 1]
[0, 0, 0, 3, 0]
[0, 0, 1, 0, 0]
[0, 0, 1, 0, 1]
[0, 0, 1, 1, 0]
[0, 0, 1, 2, 0]
[0, 0, 2, 0, 0]
[0, 1, 0, 0, 0]
[0, 1, 0, 0, 1]
[0, 1, 0, 1, 0]
[0, 1, 0, 1, 1]
[0, 1, 0, 2, 0]
[0, 1, 1, 0, 0]
[0, 1, 1, 1, 0]
[0, 2, 0, 0, 0]
[0, 2, 0, 0, 1]
[0, 2, 0, 1, 0]
[0, 2, 1, 0, 0]
[0, 3, 0, 0, 0]
[0, 0, 0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 1]
[0, 0, 0, 2]
[0, 0, 1, 0]
[0, 1, 0, 0]
[0, 0, 0, 0]
[0.00843 s] survived
   - [#  31] CRP S_x_v1: 
--------------------------------------------------------------------------------
  17:             return self.current
  18:         else:
  19:             self.remove_all_routes_of_type_i(self.route)
  20:             while self.route > 0:
- 21:                 self.route -= 1
+ 21:                 self.route -= 2
  22:                 if self.one_more_route_i_fits(self.route):
  23:                     self.add_one_more_route_i(self.route)
  24:                     self.route = len(self.A) - 1
  25:                     return self.current
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 1]
[0, 0, 0, 2]
[0, 1, 0, 0]
[0, 1, 0, 1]
[0, 1, 0, 2]
[0, 2, 0, 0]
[0, 2, 0, 1]
[0, 3, 0, 0]
[0, 3, 0, 1]
[0, 4, 0, 0]
[0, 0, 0, 1]
[0.00780 s] killed by test_does_not_exceed (tests_Sxv1.TestSx)
   - [#  32] CRP S_x_v1: 
--------------------------------------------------------------------------------
  20:             while self.route > 0:
  21:                 self.route -= 1
  22:                 if self.one_more_route_i_fits(self.route):
  23:                     self.add_one_more_route_i(self.route)
- 24:                     self.route = len(self.A) - 1
+ 24:                     self.route = len(self.A) - 2
  25:                     return self.current
  26:                 else:
  27:                     self.remove_all_routes_of_type_i(self.route)
  28:             self.route = len(self.A) - 1
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 2, 0]
[0, 0, 0, 1, 0, 0]
[0, 0, 0, 1, 1, 0]
[0, 0, 0, 2, 0, 0]
[0, 0, 1, 0, 0, 0]
[0, 0, 1, 0, 1, 0]
[0, 0, 1, 1, 0, 0]
[0, 0, 2, 0, 0, 0]
[0, 1, 0, 0, 0, 0]
[0, 1, 0, 0, 1, 0]
[0, 1, 0, 1, 0, 0]
[0, 1, 1, 0, 0, 0]
[0, 2, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 1, 0]
[1, 0, 0, 1, 0, 0]
[1, 0, 1, 0, 0, 0]
[1, 1, 0, 0, 0, 0]
[2, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 1]
[0, 0, 0, 2]
[0, 0, 1, 0]
[0, 1, 0, 0]
[1, 0, 0, 0]
[0, 0, 0, 0]
[0.00774 s] survived
   - [#  33] CRP S_x_v1: 
--------------------------------------------------------------------------------
  24:                     self.route = len(self.A) - 1
  25:                     return self.current
  26:                 else:
  27:                     self.remove_all_routes_of_type_i(self.route)
- 28:             self.route = len(self.A) - 1
+ 28:             self.route = len(self.A) - 2
  29:             return self.current
  30:     
  31:     def add_one_more_route_i(self, i):
  32:         self.rem1 -= self.A[i][0]
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 0, 0, 1, 1]
[0, 0, 0, 0, 0, 0, 2, 0]
[0, 0, 0, 0, 0, 1, 0, 0]
[0, 0, 0, 0, 0, 1, 0, 1]
[0, 0, 0, 0, 0, 1, 1, 0]
[0, 0, 0, 0, 0, 2, 0, 0]
[0, 0, 0, 0, 1, 0, 0, 0]
[0, 0, 0, 0, 1, 0, 0, 1]
[0, 0, 0, 0, 1, 0, 1, 0]
[0, 0, 0, 0, 1, 1, 0, 0]
[0, 0, 0, 0, 2, 0, 0, 0]
[0, 0, 0, 0, 3, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 0, 1]
[0, 0, 0, 1, 0, 0, 1, 0]
[0, 0, 0, 1, 0, 1, 0, 0]
[0, 0, 0, 1, 1, 0, 0, 0]
[0, 0, 0, 1, 1, 0, 0, 1]
[0, 0, 0, 1, 1, 0, 1, 0]
[0, 0, 0, 1, 1, 1, 0, 0]
[0, 0, 0, 1, 2, 0, 0, 0]
[0, 0, 0, 2, 0, 0, 0, 0]
[0, 0, 0, 2, 0, 0, 0, 1]
[0, 0, 0, 2, 0, 0, 1, 0]
[0, 0, 0, 2, 0, 1, 0, 0]
[0, 0, 0, 2, 1, 0, 0, 0]
[0, 0, 0, 2, 2, 0, 0, 0]
[0, 0, 0, 3, 0, 0, 0, 0]
[0, 0, 0, 3, 1, 0, 0, 0]
[0, 0, 0, 4, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 1]
[0, 0, 1, 0, 0, 0, 1, 0]
[0, 0, 1, 0, 0, 1, 0, 0]
[0, 0, 1, 0, 1, 0, 0, 0]
[0, 0, 1, 0, 1, 0, 0, 1]
[0, 0, 1, 0, 1, 0, 1, 0]
[0, 0, 1, 0, 1, 1, 0, 0]
[0, 0, 1, 0, 2, 0, 0, 0]
[0, 0, 1, 0, 3, 0, 0, 0]
[0, 0, 1, 1, 0, 0, 0, 0]
[0, 0, 1, 1, 0, 0, 0, 1]
[0, 0, 1, 1, 0, 0, 1, 0]
[0, 0, 1, 1, 0, 1, 0, 0]
[0, 0, 1, 1, 1, 0, 0, 0]
[0, 0, 1, 1, 2, 0, 0, 0]
[0, 0, 1, 2, 0, 0, 0, 0]
[0, 0, 1, 2, 0, 0, 0, 1]
[0, 0, 1, 2, 1, 0, 0, 0]
[0, 0, 1, 3, 0, 0, 0, 0]
[0, 0, 2, 0, 0, 0, 0, 0]
[0, 0, 2, 0, 0, 0, 0, 1]
[0, 0, 2, 0, 0, 0, 1, 0]
[0, 0, 2, 0, 0, 1, 0, 0]
[0, 0, 2, 0, 1, 0, 0, 0]
[0, 0, 2, 0, 1, 0, 0, 1]
[0, 0, 2, 0, 2, 0, 0, 0]
[0, 0, 2, 1, 0, 0, 0, 0]
[0, 0, 2, 1, 0, 0, 0, 1]
[0, 0, 2, 1, 1, 0, 0, 0]
[0, 0, 2, 2, 0, 0, 0, 0]
[0, 0, 3, 0, 0, 0, 0, 0]
[0, 0, 3, 0, 0, 0, 0, 1]
[0, 0, 3, 0, 1, 0, 0, 0]
[0, 0, 3, 1, 0, 0, 0, 0]
[0, 0, 4, 0, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0, 0, 1]
[0, 1, 0, 0, 0, 0, 1, 0]
[0, 1, 0, 0, 0, 1, 0, 0]
[0, 1, 0, 0, 1, 0, 0, 0]
[0, 1, 0, 0, 2, 0, 0, 0]
[0, 1, 0, 1, 0, 0, 0, 0]
[0, 1, 0, 1, 0, 0, 0, 1]
[0, 1, 0, 1, 0, 0, 1, 0]
[0, 1, 0, 1, 0, 1, 0, 0]
[0, 1, 0, 1, 1, 0, 0, 0]
[0, 1, 0, 2, 0, 0, 0, 0]
[0, 1, 0, 2, 1, 0, 0, 0]
[0, 1, 0, 3, 0, 0, 0, 0]
[0, 1, 1, 0, 0, 0, 0, 0]
[0, 1, 1, 0, 0, 0, 0, 1]
[0, 1, 1, 0, 0, 0, 1, 0]
[0, 1, 1, 0, 0, 1, 0, 0]
[0, 1, 1, 0, 1, 0, 0, 0]
[0, 1, 1, 0, 2, 0, 0, 0]
[0, 1, 1, 1, 0, 0, 0, 0]
[0, 1, 1, 1, 1, 0, 0, 0]
[0, 1, 1, 2, 0, 0, 0, 0]
[0, 1, 2, 0, 0, 0, 0, 0]
[0, 1, 2, 0, 0, 0, 0, 1]
[0, 1, 2, 0, 1, 0, 0, 0]
[0, 1, 2, 1, 0, 0, 0, 0]
[0, 1, 3, 0, 0, 0, 0, 0]
[0, 2, 0, 0, 0, 0, 0, 0]
[0, 2, 0, 0, 1, 0, 0, 0]
[0, 2, 0, 1, 0, 0, 0, 0]
[0, 2, 0, 2, 0, 0, 0, 0]
[0, 2, 1, 0, 0, 0, 0, 0]
[0, 2, 1, 0, 1, 0, 0, 0]
[0, 2, 1, 1, 0, 0, 0, 0]
[0, 2, 2, 0, 0, 0, 0, 0]
[0, 3, 0, 0, 0, 0, 0, 0]
[0, 3, 1, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 0, 1]
[1, 0, 0, 0, 0, 0, 1, 0]
[1, 0, 0, 0, 0, 1, 0, 0]
[1, 0, 0, 0, 1, 0, 0, 0]
[1, 0, 0, 0, 2, 0, 0, 0]
[1, 0, 0, 1, 0, 0, 0, 0]
[1, 0, 0, 1, 1, 0, 0, 0]
[1, 0, 0, 2, 0, 0, 0, 0]
[1, 0, 0, 3, 0, 0, 0, 0]
[1, 0, 1, 0, 0, 0, 0, 0]
[1, 0, 1, 0, 0, 0, 0, 1]
[1, 0, 1, 0, 0, 0, 1, 0]
[1, 0, 1, 0, 0, 1, 0, 0]
[1, 0, 1, 0, 1, 0, 0, 0]
[1, 0, 1, 1, 0, 0, 0, 0]
[1, 0, 1, 1, 1, 0, 0, 0]
[1, 0, 1, 2, 0, 0, 0, 0]
[1, 0, 2, 0, 0, 0, 0, 0]
[1, 0, 2, 0, 1, 0, 0, 0]
[1, 0, 2, 1, 0, 0, 0, 0]
[1, 0, 3, 0, 0, 0, 0, 0]
[1, 1, 0, 0, 0, 0, 0, 0]
[1, 1, 0, 0, 1, 0, 0, 0]
[1, 1, 0, 1, 0, 0, 0, 0]
[1, 1, 1, 0, 0, 0, 0, 0]
[1, 1, 1, 1, 0, 0, 0, 0]
[1, 1, 2, 0, 0, 0, 0, 0]
[1, 2, 0, 0, 0, 0, 0, 0]
[2, 0, 0, 0, 0, 0, 0, 0]
[2, 0, 0, 1, 0, 0, 0, 0]
[2, 0, 1, 0, 0, 0, 0, 0]
[2, 0, 2, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 1]
[0, 0, 0, 2]
[0, 0, 0, 3]
[0, 0, 1, 0]
[0, 1, 0, 0]
[1, 0, 0, 0]
[1, 0, 0, 1]
[1, 0, 0, 2]
[0, 0, 0, 0]
[0.02276 s] survived
   - [#  34] CRP S_x_v1: 
--------------------------------------------------------------------------------
  28:             self.route = len(self.A) - 1
  29:             return self.current
  30:     
  31:     def add_one_more_route_i(self, i):
- 32:         self.rem1 -= self.A[i][0]
+ 32:         self.rem1 -= self.A[i][1]
  33:         self.rem2 -= self.A[i][1]
  34:         self.current[i] += 1
  35:         self.res_per_route[i][0] = self.res_per_route[i][0] + self.A[i][0]
  36:         self.res_per_route[i][1] = self.res_per_route[i][1] + self.A[i][1]
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 0, 3]
[0, 0, 0, 0, 1, 0]
[0, 0, 0, 1, 0, 0]
[0, 0, 0, 0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 0, 1, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0]
[0.00687 s] survived
   - [#  35] CRP S_x_v1: 
--------------------------------------------------------------------------------
  29:             return self.current
  30:     
  31:     def add_one_more_route_i(self, i):
  32:         self.rem1 -= self.A[i][0]
- 33:         self.rem2 -= self.A[i][1]
+ 33:         self.rem2 -= self.A[i][2]
  34:         self.current[i] += 1
  35:         self.res_per_route[i][0] = self.res_per_route[i][0] + self.A[i][0]
  36:         self.res_per_route[i][1] = self.res_per_route[i][1] + self.A[i][1]
  37:     
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0.00730 s] killed by test_does_not_exceed (tests_Sxv1.TestSx)
   - [#  36] CRP S_x_v1: 
--------------------------------------------------------------------------------
  30:     
  31:     def add_one_more_route_i(self, i):
  32:         self.rem1 -= self.A[i][0]
  33:         self.rem2 -= self.A[i][1]
- 34:         self.current[i] += 1
+ 34:         self.current[i] += 2
  35:         self.res_per_route[i][0] = self.res_per_route[i][0] + self.A[i][0]
  36:         self.res_per_route[i][1] = self.res_per_route[i][1] + self.A[i][1]
  37:     
  38:     def one_more_route_i_fits(self, i):
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 0, 4]
[0.00752 s] killed by test_does_not_exceed (tests_Sxv1.TestSx)
   - [#  37] CRP S_x_v1: 
--------------------------------------------------------------------------------
  31:     def add_one_more_route_i(self, i):
  32:         self.rem1 -= self.A[i][0]
  33:         self.rem2 -= self.A[i][1]
  34:         self.current[i] += 1
- 35:         self.res_per_route[i][0] = self.res_per_route[i][0] + self.A[i][0]
+ 35:         self.res_per_route[i][1] = self.res_per_route[i][0] + self.A[i][0]
  36:         self.res_per_route[i][1] = self.res_per_route[i][1] + self.A[i][1]
  37:     
  38:     def one_more_route_i_fits(self, i):
  39:         return (self.A[i][0] <= self.rem1 and self.A[i][1] <= self.rem2)
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 1, 1]
[0, 0, 0, 0, 2, 0]
[0, 0, 0, 1, 0, 0]
[0, 0, 0, 1, 0, 1]
[0, 0, 0, 1, 1, 0]
[0, 0, 0, 2, 0, 0]
[0, 0, 1, 0, 0, 0]
[0, 0, 1, 0, 0, 1]
[0, 0, 1, 0, 1, 0]
[0, 0, 1, 1, 0, 0]
[0, 0, 2, 0, 0, 0]
[0, 1, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 1]
[0, 1, 0, 0, 1, 0]
[0, 1, 0, 1, 0, 0]
[0, 1, 0, 1, 0, 1]
[0, 1, 1, 0, 0, 0]
[0, 2, 0, 0, 0, 0]
[0, 3, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 1]
[1, 0, 0, 0, 1, 0]
[1, 0, 0, 1, 0, 0]
[1, 0, 1, 0, 0, 0]
[1, 1, 0, 0, 0, 0]
[1, 1, 0, 1, 0, 0]
[2, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 1]
[0, 0, 0, 2]
[0, 0, 1, 0]
[0, 1, 0, 0]
[1, 0, 0, 0]
[1, 0, 0, 1]
[0, 0, 0, 0]
[0.00799 s] survived
   - [#  38] CRP S_x_v1: 
--------------------------------------------------------------------------------
  31:     def add_one_more_route_i(self, i):
  32:         self.rem1 -= self.A[i][0]
  33:         self.rem2 -= self.A[i][1]
  34:         self.current[i] += 1
- 35:         self.res_per_route[i][0] = self.res_per_route[i][0] + self.A[i][0]
+ 35:         self.res_per_route[i][0] = self.res_per_route[i][1] + self.A[i][0]
  36:         self.res_per_route[i][1] = self.res_per_route[i][1] + self.A[i][1]
  37:     
  38:     def one_more_route_i_fits(self, i):
  39:         return (self.A[i][0] <= self.rem1 and self.A[i][1] <= self.rem2)
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 1]
[0, 0, 0, 0, 2]
[0, 0, 0, 0, 3]
[0, 0, 0, 1, 0]
[0, 0, 0, 1, 1]
[0, 0, 0, 1, 2]
[0, 0, 0, 2, 0]
[0, 0, 0, 2, 1]
[0, 0, 0, 3, 0]
[0, 0, 1, 0, 0]
[0, 0, 1, 0, 1]
[0, 0, 1, 0, 2]
[0, 0, 1, 1, 0]
[0, 0, 1, 1, 1]
[0, 0, 1, 2, 0]
[0, 0, 2, 0, 0]
[0, 0, 2, 0, 1]
[0, 0, 2, 1, 0]
[0, 1, 0, 0, 0]
[0, 1, 0, 0, 1]
[0, 1, 0, 0, 2]
[0, 1, 0, 1, 0]
[0, 1, 0, 1, 1]
[0, 1, 0, 2, 0]
[0, 1, 1, 0, 0]
[0, 1, 1, 0, 1]
[0, 1, 1, 1, 0]
[0, 2, 0, 0, 0]
[0, 2, 0, 0, 1]
[0, 2, 0, 1, 0]
[1, 0, 0, 0, 0]
[1, 0, 0, 0, 1]
[1, 0, 0, 0, 2]
[1, 0, 0, 1, 0]
[1, 0, 0, 1, 1]
[1, 0, 0, 2, 0]
[1, 0, 1, 0, 0]
[1, 0, 1, 0, 1]
[1, 0, 1, 1, 0]
[1, 0, 2, 0, 0]
[1, 1, 0, 0, 0]
[1, 1, 0, 0, 1]
[1, 1, 0, 1, 0]
[1, 1, 1, 0, 0]
[1, 2, 0, 0, 0]
[2, 0, 0, 0, 0]
[2, 0, 0, 0, 1]
[2, 0, 0, 1, 0]
[2, 0, 1, 0, 0]
[2, 1, 0, 0, 0]
[3, 0, 0, 0, 0]
[0, 0, 0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 1]
[0, 1, 0]
[1, 0, 0]
[0, 0, 0]
[0.00865 s] survived
   - [#  39] CRP S_x_v1: 
--------------------------------------------------------------------------------
  31:     def add_one_more_route_i(self, i):
  32:         self.rem1 -= self.A[i][0]
  33:         self.rem2 -= self.A[i][1]
  34:         self.current[i] += 1
- 35:         self.res_per_route[i][0] = self.res_per_route[i][0] + self.A[i][0]
+ 35:         self.res_per_route[i][0] = self.res_per_route[i][0] + self.A[i][1]
  36:         self.res_per_route[i][1] = self.res_per_route[i][1] + self.A[i][1]
  37:     
  38:     def one_more_route_i_fits(self, i):
  39:         return (self.A[i][0] <= self.rem1 and self.A[i][1] <= self.rem2)
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 0, 1, 1]
[0, 0, 0, 0, 0, 1, 2]
[0, 0, 0, 0, 0, 2, 0]
[0, 0, 0, 0, 0, 2, 1]
[0, 0, 0, 0, 0, 3, 0]
[0, 0, 0, 0, 1, 0, 0]
[0, 0, 0, 0, 1, 0, 1]
[0, 0, 0, 0, 1, 1, 0]
[0, 0, 0, 0, 1, 1, 1]
[0, 0, 0, 0, 1, 2, 0]
[0, 0, 0, 0, 2, 0, 0]
[0, 0, 0, 0, 2, 0, 1]
[0, 0, 0, 0, 2, 1, 0]
[0, 0, 0, 0, 3, 0, 0]
[0, 0, 0, 1, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 1]
[0, 0, 0, 1, 0, 0, 2]
[0, 0, 0, 1, 0, 1, 0]
[0, 0, 0, 1, 0, 1, 1]
[0, 0, 0, 1, 0, 2, 0]
[0, 0, 0, 1, 1, 0, 0]
[0, 0, 0, 1, 1, 0, 1]
[0, 0, 0, 1, 1, 1, 0]
[0, 0, 0, 1, 2, 0, 0]
[0, 0, 0, 2, 0, 0, 0]
[0, 0, 0, 2, 0, 0, 1]
[0, 0, 0, 2, 0, 1, 0]
[0, 0, 0, 2, 1, 0, 0]
[0, 0, 0, 3, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 1]
[0, 0, 1, 0, 0, 0, 2]
[0, 0, 1, 0, 0, 1, 0]
[0, 0, 1, 0, 0, 1, 1]
[0, 0, 1, 0, 0, 2, 0]
[0, 0, 1, 0, 1, 0, 0]
[0, 0, 1, 0, 1, 0, 1]
[0, 0, 1, 0, 1, 1, 0]
[0, 0, 1, 0, 2, 0, 0]
[0, 0, 1, 1, 0, 0, 0]
[0, 0, 1, 1, 0, 0, 1]
[0, 0, 1, 1, 0, 1, 0]
[0, 0, 1, 1, 1, 0, 0]
[0, 0, 1, 2, 0, 0, 0]
[0, 0, 2, 0, 0, 0, 0]
[0, 0, 2, 0, 0, 0, 1]
[0, 0, 2, 0, 0, 1, 0]
[0, 0, 2, 0, 1, 0, 0]
[0, 0, 2, 1, 0, 0, 0]
[0, 0, 3, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0, 1]
[0, 1, 0, 0, 0, 1, 0]
[0, 1, 0, 0, 0, 1, 1]
[0, 1, 0, 0, 0, 2, 0]
[0, 1, 0, 0, 1, 0, 0]
[0, 1, 0, 0, 1, 0, 1]
[0, 1, 0, 0, 1, 1, 0]
[0, 1, 0, 0, 2, 0, 0]
[0, 1, 0, 1, 0, 0, 0]
[0, 1, 0, 1, 0, 0, 1]
[0, 1, 0, 1, 0, 1, 0]
[0, 1, 0, 1, 1, 0, 0]
[0, 1, 0, 2, 0, 0, 0]
[0, 1, 1, 0, 0, 0, 0]
[0, 1, 1, 0, 0, 0, 1]
[0, 1, 1, 0, 0, 1, 0]
[0, 1, 1, 0, 1, 0, 0]
[0, 1, 1, 1, 0, 0, 0]
[0, 1, 2, 0, 0, 0, 0]
[0, 2, 0, 0, 0, 0, 0]
[0, 2, 0, 0, 0, 0, 1]
[0, 2, 0, 0, 0, 1, 0]
[0, 2, 0, 0, 1, 0, 0]
[0, 2, 0, 1, 0, 0, 0]
[0, 2, 1, 0, 0, 0, 0]
[0, 3, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 1]
[1, 0, 0, 0, 0, 1, 0]
[1, 0, 0, 0, 0, 1, 1]
[1, 0, 0, 0, 0, 2, 0]
[1, 0, 0, 0, 1, 0, 0]
[1, 0, 0, 0, 1, 0, 1]
[1, 0, 0, 0, 1, 1, 0]
[1, 0, 0, 0, 2, 0, 0]
[1, 0, 0, 1, 0, 0, 0]
[1, 0, 0, 1, 0, 0, 1]
[1, 0, 0, 1, 0, 1, 0]
[1, 0, 0, 1, 1, 0, 0]
[1, 0, 0, 2, 0, 0, 0]
[1, 0, 1, 0, 0, 0, 0]
[1, 0, 1, 0, 0, 0, 1]
[1, 0, 1, 0, 0, 1, 0]
[1, 0, 1, 0, 1, 0, 0]
[1, 0, 1, 1, 0, 0, 0]
[1, 0, 2, 0, 0, 0, 0]
[1, 1, 0, 0, 0, 0, 0]
[1, 1, 0, 0, 0, 0, 1]
[1, 1, 0, 0, 0, 1, 0]
[1, 1, 0, 0, 1, 0, 0]
[1, 1, 0, 1, 0, 0, 0]
[1, 1, 1, 0, 0, 0, 0]
[1, 2, 0, 0, 0, 0, 0]
[2, 0, 0, 0, 0, 0, 0]
[2, 0, 0, 0, 0, 0, 1]
[2, 0, 0, 0, 0, 1, 0]
[2, 0, 0, 0, 1, 0, 0]
[2, 0, 0, 1, 0, 0, 0]
[2, 0, 1, 0, 0, 0, 0]
[2, 1, 0, 0, 0, 0, 0]
[3, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 0, 1, 1]
[0, 0, 0, 0, 0, 1, 2]
[0, 0, 0, 0, 0, 2, 0]
[0, 0, 0, 0, 0, 2, 1]
[0, 0, 0, 0, 0, 3, 0]
[0, 0, 0, 0, 1, 0, 0]
[0, 0, 0, 0, 1, 0, 1]
[0, 0, 0, 0, 1, 0, 2]
[0, 0, 0, 0, 1, 1, 0]
[0, 0, 0, 0, 1, 1, 1]
[0, 0, 0, 0, 1, 2, 0]
[0, 0, 0, 0, 2, 0, 0]
[0, 0, 0, 0, 2, 0, 1]
[0, 0, 0, 0, 2, 1, 0]
[0, 0, 0, 0, 3, 0, 0]
[0, 0, 0, 1, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 1]
[0, 0, 0, 1, 0, 1, 0]
[0, 0, 0, 1, 0, 1, 1]
[0, 0, 0, 1, 0, 2, 0]
[0, 0, 0, 1, 1, 0, 0]
[0, 0, 0, 1, 1, 0, 1]
[0, 0, 0, 1, 1, 1, 0]
[0, 0, 0, 1, 2, 0, 0]
[0, 0, 0, 2, 0, 0, 0]
[0, 0, 0, 2, 0, 1, 0]
[0, 0, 0, 2, 1, 0, 0]
[0, 0, 1, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0]
[0.01561 s] survived
   - [#  40] CRP S_x_v1: 
--------------------------------------------------------------------------------
  32:         self.rem1 -= self.A[i][0]
  33:         self.rem2 -= self.A[i][1]
  34:         self.current[i] += 1
  35:         self.res_per_route[i][0] = self.res_per_route[i][0] + self.A[i][0]
- 36:         self.res_per_route[i][1] = self.res_per_route[i][1] + self.A[i][1]
+ 36:         self.res_per_route[i][2] = self.res_per_route[i][1] + self.A[i][1]
  37:     
  38:     def one_more_route_i_fits(self, i):
  39:         return (self.A[i][0] <= self.rem1 and self.A[i][1] <= self.rem2)
  40:     
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0.00740 s] killed by test_does_not_exceed (tests_Sxv1.TestSx)
   - [#  41] CRP S_x_v1: 
--------------------------------------------------------------------------------
  32:         self.rem1 -= self.A[i][0]
  33:         self.rem2 -= self.A[i][1]
  34:         self.current[i] += 1
  35:         self.res_per_route[i][0] = self.res_per_route[i][0] + self.A[i][0]
- 36:         self.res_per_route[i][1] = self.res_per_route[i][1] + self.A[i][1]
+ 36:         self.res_per_route[i][1] = self.res_per_route[i][2] + self.A[i][1]
  37:     
  38:     def one_more_route_i_fits(self, i):
  39:         return (self.A[i][0] <= self.rem1 and self.A[i][1] <= self.rem2)
  40:     
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0.00749 s] killed by test_does_not_exceed (tests_Sxv1.TestSx)
   - [#  42] CRP S_x_v1: 
--------------------------------------------------------------------------------
  32:         self.rem1 -= self.A[i][0]
  33:         self.rem2 -= self.A[i][1]
  34:         self.current[i] += 1
  35:         self.res_per_route[i][0] = self.res_per_route[i][0] + self.A[i][0]
- 36:         self.res_per_route[i][1] = self.res_per_route[i][1] + self.A[i][1]
+ 36:         self.res_per_route[i][1] = self.res_per_route[i][1] + self.A[i][2]
  37:     
  38:     def one_more_route_i_fits(self, i):
  39:         return (self.A[i][0] <= self.rem1 and self.A[i][1] <= self.rem2)
  40:     
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0.00771 s] killed by test_does_not_exceed (tests_Sxv1.TestSx)
   - [#  43] CRP S_x_v1: 
--------------------------------------------------------------------------------
  35:         self.res_per_route[i][0] = self.res_per_route[i][0] + self.A[i][0]
  36:         self.res_per_route[i][1] = self.res_per_route[i][1] + self.A[i][1]
  37:     
  38:     def one_more_route_i_fits(self, i):
- 39:         return (self.A[i][0] <= self.rem1 and self.A[i][1] <= self.rem2)
+ 39:         return (self.A[i][1] <= self.rem1 and self.A[i][1] <= self.rem2)
  40:     
  41:     def remove_all_routes_of_type_i_or_greater(self, i):
  42:         for j in range(i, len(self.A)):
  43:             self.remove_all_routes_of_type_i(j)
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 1]
[0, 0, 2]
[0, 0, 3]
[0, 0, 4]
[0, 0, 5]
[0, 0, 6]
[0, 0, 7]
[0, 1, 0]
[0, 1, 1]
[0, 1, 2]
[0, 1, 3]
[0, 1, 4]
[0, 2, 0]
[1, 0, 0]
[1, 0, 1]
[1, 0, 2]
[1, 0, 3]
[1, 0, 4]
[1, 1, 0]
[2, 0, 0]
[0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 1]
[1, 0, 0, 0, 0]
[0, 0, 0, 0, 0]
[0.00749 s] survived
   - [#  44] CRP S_x_v1: 
--------------------------------------------------------------------------------
  35:         self.res_per_route[i][0] = self.res_per_route[i][0] + self.A[i][0]
  36:         self.res_per_route[i][1] = self.res_per_route[i][1] + self.A[i][1]
  37:     
  38:     def one_more_route_i_fits(self, i):
- 39:         return (self.A[i][0] <= self.rem1 and self.A[i][1] <= self.rem2)
+ 39:         return (self.A[i][0] <= self.rem1 and self.A[i][2] <= self.rem2)
  40:     
  41:     def remove_all_routes_of_type_i_or_greater(self, i):
  42:         for j in range(i, len(self.A)):
  43:             self.remove_all_routes_of_type_i(j)
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0.00747 s] killed by test_does_not_exceed (tests_Sxv1.TestSx)
   - [#  45] CRP S_x_v1: 
--------------------------------------------------------------------------------
  42:         for j in range(i, len(self.A)):
  43:             self.remove_all_routes_of_type_i(j)
  44:     
  45:     def remove_all_routes_of_type_i(self, i):
- 46:         self.rem1 += self.A[i][0] * self.current[i]
+ 46:         self.rem1 += self.A[i][1] * self.current[i]
  47:         self.rem2 += self.A[i][1] * self.current[i]
  48:         self.res_per_route[i][0] = 0
  49:         self.res_per_route[i][1] = 0
  50:         self.current[i] = 0
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 1, 1]
[0, 0, 0, 0, 1, 2]
[0, 0, 0, 0, 2, 0]
[0, 0, 0, 0, 2, 1]
[0, 0, 0, 0, 3, 0]
[0, 0, 0, 0, 3, 1]
[0, 0, 0, 0, 4, 0]
[0, 0, 0, 0, 5, 0]
[0, 0, 0, 1, 0, 0]
[0, 0, 0, 1, 0, 1]
[0, 0, 0, 1, 1, 0]
[0, 0, 0, 1, 1, 1]
[0, 0, 0, 1, 2, 0]
[0, 0, 0, 1, 3, 0]
[0, 0, 0, 2, 0, 0]
[0, 0, 1, 0, 0, 0]
[0, 0, 1, 0, 0, 1]
[0, 0, 1, 0, 0, 2]
[0.00925 s] killed by test_does_not_exceed (tests_Sxv1.TestSx)
   - [#  46] CRP S_x_v1: 
--------------------------------------------------------------------------------
  43:             self.remove_all_routes_of_type_i(j)
  44:     
  45:     def remove_all_routes_of_type_i(self, i):
  46:         self.rem1 += self.A[i][0] * self.current[i]
- 47:         self.rem2 += self.A[i][1] * self.current[i]
+ 47:         self.rem2 += self.A[i][2] * self.current[i]
  48:         self.res_per_route[i][0] = 0
  49:         self.res_per_route[i][1] = 0
  50:         self.current[i] = 0
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 0, 2]
[0.00788 s] killed by test_does_not_exceed (tests_Sxv1.TestSx)
   - [#  47] CRP S_x_v1: 
--------------------------------------------------------------------------------
  44:     
  45:     def remove_all_routes_of_type_i(self, i):
  46:         self.rem1 += self.A[i][0] * self.current[i]
  47:         self.rem2 += self.A[i][1] * self.current[i]
- 48:         self.res_per_route[i][0] = 0
+ 48:         self.res_per_route[i][1] = 0
  49:         self.res_per_route[i][1] = 0
  50:         self.current[i] = 0
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 1]
[0, 0, 0, 2]
[0, 0, 1, 0]
[0, 0, 1, 1]
[0, 0, 2, 0]
[0, 1, 0, 0]
[0, 1, 0, 1]
[0, 1, 0, 2]
[0, 1, 1, 0]
[0, 2, 0, 0]
[0, 2, 0, 1]
[0, 2, 1, 0]
[0, 3, 0, 0]
[0, 3, 0, 1]
[0, 4, 0, 0]
[0, 5, 0, 0]
[1, 0, 0, 0]
[1, 0, 0, 1]
[1, 0, 1, 0]
[1, 1, 0, 0]
[1, 1, 0, 1]
[1, 2, 0, 0]
[1, 3, 0, 0]
[2, 0, 0, 0]
[2, 1, 0, 0]
[0, 0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 1, 1]
[0, 0, 0, 0, 2, 0]
[0, 0, 0, 1, 0, 0]
[0, 0, 0, 1, 0, 1]
[0, 0, 0, 1, 1, 0]
[0, 0, 0, 2, 0, 0]
[0, 0, 1, 0, 0, 0]
[0, 1, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0]
[0.00749 s] survived
   - [#  48] CRP S_x_v1: 
--------------------------------------------------------------------------------
  44:     
  45:     def remove_all_routes_of_type_i(self, i):
  46:         self.rem1 += self.A[i][0] * self.current[i]
  47:         self.rem2 += self.A[i][1] * self.current[i]
- 48:         self.res_per_route[i][0] = 0
+ 48:         self.res_per_route[i][0] = 1
  49:         self.res_per_route[i][1] = 0
  50:         self.current[i] = 0
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 0, 0, 1, 1]
[0, 0, 0, 0, 0, 0, 2, 0]
[0, 0, 0, 0, 0, 0, 2, 1]
[0, 0, 0, 0, 0, 0, 3, 0]
[0, 0, 0, 0, 0, 0, 4, 0]
[0, 0, 0, 0, 0, 1, 0, 0]
[0, 0, 0, 0, 0, 1, 0, 1]
[0, 0, 0, 0, 0, 1, 0, 2]
[0, 0, 0, 0, 0, 1, 1, 0]
[0, 0, 0, 0, 0, 1, 1, 1]
[0, 0, 0, 0, 0, 1, 2, 0]
[0, 0, 0, 0, 0, 1, 2, 1]
[0, 0, 0, 0, 0, 1, 3, 0]
[0, 0, 0, 0, 0, 1, 4, 0]
[0, 0, 0, 0, 0, 2, 0, 0]
[0, 0, 0, 0, 0, 2, 0, 1]
[0, 0, 0, 0, 0, 2, 1, 0]
[0, 0, 0, 0, 1, 0, 0, 0]
[0, 0, 0, 0, 1, 0, 0, 1]
[0, 0, 0, 0, 1, 0, 0, 2]
[0, 0, 0, 0, 1, 0, 1, 0]
[0, 0, 0, 0, 1, 0, 1, 1]
[0, 0, 0, 0, 1, 0, 2, 0]
[0, 0, 0, 0, 1, 0, 2, 1]
[0, 0, 0, 0, 1, 0, 3, 0]
[0, 0, 0, 0, 1, 0, 4, 0]
[0, 0, 0, 0, 1, 1, 0, 0]
[0, 0, 0, 0, 1, 1, 0, 1]
[0, 0, 0, 0, 1, 1, 1, 0]
[0, 0, 0, 0, 2, 0, 0, 0]
[0, 0, 0, 0, 2, 0, 0, 1]
[0, 0, 0, 0, 2, 0, 1, 0]
[0, 0, 0, 1, 0, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 0, 1]
[0, 0, 0, 1, 0, 0, 1, 0]
[0, 0, 0, 1, 0, 0, 1, 1]
[0, 0, 0, 1, 0, 0, 2, 0]
[0, 0, 0, 1, 0, 0, 3, 0]
[0, 0, 0, 1, 0, 1, 0, 0]
[0, 0, 0, 1, 0, 1, 0, 1]
[0, 0, 0, 1, 0, 1, 1, 0]
[0, 0, 0, 1, 0, 1, 1, 1]
[0, 0, 0, 1, 0, 1, 2, 0]
[0, 0, 0, 1, 0, 1, 3, 0]
[0, 0, 0, 1, 0, 2, 0, 0]
[0, 0, 0, 1, 1, 0, 0, 0]
[0, 0, 0, 1, 1, 0, 0, 1]
[0, 0, 0, 1, 1, 0, 1, 0]
[0, 0, 0, 1, 1, 0, 1, 1]
[0, 0, 0, 1, 1, 0, 2, 0]
[0, 0, 0, 1, 1, 0, 3, 0]
[0, 0, 0, 1, 1, 1, 0, 0]
[0, 0, 0, 1, 2, 0, 0, 0]
[0, 0, 0, 2, 0, 0, 0, 0]
[0, 0, 0, 2, 0, 0, 0, 1]
[0, 0, 0, 2, 0, 0, 1, 0]
[0, 0, 0, 2, 0, 0, 2, 0]
[0, 0, 0, 2, 0, 1, 0, 0]
[0, 0, 0, 2, 0, 1, 0, 1]
[0, 0, 0, 2, 0, 1, 1, 0]
[0, 0, 0, 2, 0, 1, 2, 0]
[0, 0, 0, 2, 1, 0, 0, 0]
[0, 0, 0, 2, 1, 0, 0, 1]
[0, 0, 0, 2, 1, 0, 1, 0]
[0, 0, 0, 2, 1, 0, 2, 0]
[0, 0, 0, 3, 0, 0, 0, 0]
[0, 0, 0, 3, 0, 0, 1, 0]
[0, 0, 0, 3, 0, 1, 0, 0]
[0, 0, 0, 3, 0, 1, 1, 0]
[0, 0, 0, 3, 1, 0, 0, 0]
[0, 0, 0, 3, 1, 0, 1, 0]
[0, 0, 0, 4, 0, 0, 0, 0]
[0, 0, 0, 4, 0, 1, 0, 0]
[0, 0, 0, 4, 1, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 1]
[0, 0, 1, 0, 0, 0, 1, 0]
[0, 0, 1, 0, 0, 0, 1, 1]
[0, 0, 1, 0, 0, 0, 2, 0]
[0, 0, 1, 0, 0, 0, 3, 0]
[0, 0, 1, 0, 0, 1, 0, 0]
[0, 0, 1, 0, 0, 1, 0, 1]
[0, 0, 1, 0, 0, 1, 1, 0]
[0, 0, 1, 0, 1, 0, 0, 0]
[0, 0, 1, 0, 1, 0, 0, 1]
[0, 0, 1, 0, 1, 0, 1, 0]
[0, 0, 1, 1, 0, 0, 0, 0]
[0, 0, 1, 1, 0, 0, 0, 1]
[0, 0, 1, 1, 0, 0, 1, 0]
[0, 0, 1, 1, 0, 0, 2, 0]
[0, 0, 1, 1, 0, 1, 0, 0]
[0, 0, 1, 1, 1, 0, 0, 0]
[0, 0, 1, 2, 0, 0, 0, 0]
[0, 0, 1, 2, 0, 0, 1, 0]
[0, 0, 1, 3, 0, 0, 0, 0]
[0, 0, 2, 0, 0, 0, 0, 0]
[0, 0, 2, 0, 0, 0, 0, 1]
[0, 0, 2, 0, 0, 0, 1, 0]
[0, 0, 2, 1, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0, 0, 1]
[0, 1, 0, 0, 0, 0, 1, 0]
[0, 1, 0, 0, 0, 0, 2, 0]
[0, 1, 0, 0, 0, 1, 0, 0]
[0, 1, 0, 0, 0, 1, 0, 1]
[0, 1, 0, 0, 0, 1, 1, 0]
[0, 1, 0, 0, 0, 1, 2, 0]
[0, 1, 0, 0, 1, 0, 0, 0]
[0, 1, 0, 0, 1, 0, 0, 1]
[0, 1, 0, 0, 1, 0, 1, 0]
[0, 1, 0, 0, 1, 0, 2, 0]
[0, 1, 0, 1, 0, 0, 0, 0]
[0, 1, 0, 1, 0, 0, 1, 0]
[0, 1, 0, 1, 0, 1, 0, 0]
[0, 1, 0, 1, 0, 1, 1, 0]
[0, 1, 0, 1, 1, 0, 0, 0]
[0, 1, 0, 1, 1, 0, 1, 0]
[0, 1, 0, 2, 0, 0, 0, 0]
[0, 1, 0, 2, 0, 1, 0, 0]
[0, 1, 0, 2, 1, 0, 0, 0]
[0, 1, 1, 0, 0, 0, 0, 0]
[0, 1, 1, 0, 0, 0, 1, 0]
[0, 1, 1, 1, 0, 0, 0, 0]
[0, 2, 0, 0, 0, 0, 0, 0]
[0, 2, 0, 0, 0, 1, 0, 0]
[0, 2, 0, 0, 1, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 0, 1]
[1, 0, 0, 0, 0, 0, 1, 0]
[1, 0, 0, 0, 0, 0, 2, 0]
[1, 0, 0, 0, 0, 1, 0, 0]
[1, 0, 0, 0, 0, 1, 0, 1]
[1, 0, 0, 0, 0, 1, 1, 0]
[1, 0, 0, 0, 0, 1, 2, 0]
[1, 0, 0, 0, 1, 0, 0, 0]
[1, 0, 0, 0, 1, 0, 0, 1]
[1, 0, 0, 0, 1, 0, 1, 0]
[1, 0, 0, 0, 1, 0, 2, 0]
[1, 0, 0, 1, 0, 0, 0, 0]
[1, 0, 0, 1, 0, 0, 1, 0]
[1, 0, 0, 1, 0, 1, 0, 0]
[1, 0, 0, 1, 0, 1, 1, 0]
[1, 0, 0, 1, 1, 0, 0, 0]
[1, 0, 0, 1, 1, 0, 1, 0]
[1, 0, 0, 2, 0, 0, 0, 0]
[1, 0, 0, 2, 0, 1, 0, 0]
[1, 0, 0, 2, 1, 0, 0, 0]
[1, 0, 1, 0, 0, 0, 0, 0]
[1, 0, 1, 0, 0, 0, 1, 0]
[1, 0, 1, 1, 0, 0, 0, 0]
[1, 1, 0, 0, 0, 0, 0, 0]
[1, 1, 0, 0, 0, 1, 0, 0]
[1, 1, 0, 0, 1, 0, 0, 0]
[2, 0, 0, 0, 0, 0, 0, 0]
[2, 0, 0, 0, 0, 1, 0, 0]
[2, 0, 0, 0, 1, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 1]
[0, 1, 0]
[1, 0, 0]
[0, 0, 0]
[0.02135 s] survived
   - [#  49] CRP S_x_v1: 
--------------------------------------------------------------------------------
  45:     def remove_all_routes_of_type_i(self, i):
  46:         self.rem1 += self.A[i][0] * self.current[i]
  47:         self.rem2 += self.A[i][1] * self.current[i]
  48:         self.res_per_route[i][0] = 0
- 49:         self.res_per_route[i][1] = 0
+ 49:         self.res_per_route[i][2] = 0
  50:         self.current[i] = 0
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 1]
[0, 0, 0, 0, 2]
[0, 0, 0, 0, 3]
[0.00754 s] killed by test_does_not_exceed (tests_Sxv1.TestSx)
   - [#  50] CRP S_x_v1: 
--------------------------------------------------------------------------------
  45:     def remove_all_routes_of_type_i(self, i):
  46:         self.rem1 += self.A[i][0] * self.current[i]
  47:         self.rem2 += self.A[i][1] * self.current[i]
  48:         self.res_per_route[i][0] = 0
- 49:         self.res_per_route[i][1] = 0
+ 49:         self.res_per_route[i][1] = 1
  50:         self.current[i] = 0
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 0, 0, 0, 3]
[0, 0, 0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 0, 0, 1, 1]
[0, 0, 0, 0, 0, 0, 1, 2]
[0, 0, 0, 0, 0, 0, 2, 0]
[0, 0, 0, 0, 0, 0, 2, 1]
[0, 0, 0, 0, 0, 0, 3, 0]
[0, 0, 0, 0, 0, 1, 0, 0]
[0, 0, 0, 0, 0, 1, 0, 1]
[0, 0, 0, 0, 0, 1, 0, 2]
[0, 0, 0, 0, 0, 1, 1, 0]
[0, 0, 0, 0, 0, 1, 1, 1]
[0, 0, 0, 0, 0, 1, 2, 0]
[0, 0, 0, 0, 0, 2, 0, 0]
[0, 0, 0, 0, 0, 2, 0, 1]
[0, 0, 0, 0, 0, 2, 1, 0]
[0, 0, 0, 0, 0, 3, 0, 0]
[0, 0, 0, 0, 1, 0, 0, 0]
[0, 0, 0, 0, 1, 0, 0, 1]
[0, 0, 0, 0, 1, 0, 0, 2]
[0, 0, 0, 0, 1, 0, 1, 0]
[0, 0, 0, 0, 1, 0, 1, 1]
[0, 0, 0, 0, 1, 0, 2, 0]
[0, 0, 0, 0, 1, 1, 0, 0]
[0, 0, 0, 0, 1, 1, 0, 1]
[0, 0, 0, 0, 1, 1, 1, 0]
[0, 0, 0, 0, 1, 2, 0, 0]
[0, 0, 0, 0, 2, 0, 0, 0]
[0, 0, 0, 0, 2, 0, 0, 1]
[0, 0, 0, 0, 2, 0, 1, 0]
[0, 0, 0, 0, 2, 1, 0, 0]
[0, 0, 0, 1, 0, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 0, 1]
[0, 0, 0, 1, 0, 0, 0, 2]
[0, 0, 0, 1, 0, 0, 1, 0]
[0, 0, 0, 1, 0, 0, 1, 1]
[0, 0, 0, 1, 0, 0, 2, 0]
[0, 0, 0, 1, 0, 1, 0, 0]
[0, 0, 0, 1, 0, 1, 0, 1]
[0, 0, 0, 1, 0, 1, 1, 0]
[0, 0, 0, 1, 0, 2, 0, 0]
[0, 0, 0, 1, 1, 0, 0, 0]
[0, 0, 0, 1, 1, 0, 0, 1]
[0, 0, 0, 1, 1, 0, 1, 0]
[0, 0, 0, 1, 1, 1, 0, 0]
[0, 0, 0, 2, 0, 0, 0, 0]
[0, 0, 0, 2, 0, 0, 0, 1]
[0, 0, 0, 2, 0, 0, 1, 0]
[0, 0, 0, 2, 0, 1, 0, 0]
[0, 0, 0, 3, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 1]
[0, 0, 1, 0, 0, 0, 0, 2]
[0, 0, 1, 0, 0, 0, 1, 0]
[0, 0, 1, 0, 0, 0, 1, 1]
[0, 0, 1, 0, 0, 0, 2, 0]
[0, 0, 1, 0, 0, 1, 0, 0]
[0, 0, 1, 0, 0, 1, 0, 1]
[0, 0, 1, 0, 0, 1, 1, 0]
[0, 0, 1, 0, 0, 2, 0, 0]
[0, 0, 1, 0, 1, 0, 0, 0]
[0, 0, 1, 0, 1, 0, 0, 1]
[0, 0, 1, 0, 1, 0, 1, 0]
[0, 0, 1, 0, 1, 1, 0, 0]
[0, 0, 1, 1, 0, 0, 0, 0]
[0, 0, 1, 1, 0, 0, 0, 1]
[0, 0, 1, 1, 0, 0, 1, 0]
[0, 0, 1, 1, 0, 1, 0, 0]
[0, 0, 2, 0, 0, 0, 0, 0]
[0, 0, 2, 0, 0, 0, 0, 1]
[0, 0, 2, 0, 0, 0, 1, 0]
[0, 0, 2, 0, 0, 1, 0, 0]
[0, 1, 0, 0, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0, 0, 1]
[0, 1, 0, 0, 0, 0, 0, 2]
[0, 1, 0, 0, 0, 0, 1, 0]
[0, 1, 0, 0, 0, 0, 1, 1]
[0, 1, 0, 0, 0, 0, 2, 0]
[0, 1, 0, 0, 0, 1, 0, 0]
[0, 1, 0, 0, 0, 1, 0, 1]
[0, 1, 0, 0, 0, 1, 1, 0]
[0, 1, 0, 0, 0, 2, 0, 0]
[0, 1, 0, 0, 1, 0, 0, 0]
[0, 1, 0, 0, 1, 0, 0, 1]
[0, 1, 0, 0, 1, 0, 1, 0]
[0, 1, 0, 0, 1, 1, 0, 0]
[0, 1, 0, 1, 0, 0, 0, 0]
[0, 1, 0, 1, 0, 0, 0, 1]
[0, 1, 0, 1, 0, 0, 1, 0]
[0, 1, 0, 1, 0, 1, 0, 0]
[0, 1, 0, 1, 1, 0, 0, 0]
[0, 1, 0, 2, 0, 0, 0, 0]
[0, 1, 1, 0, 0, 0, 0, 0]
[0, 1, 1, 0, 0, 0, 0, 1]
[0, 1, 1, 0, 0, 0, 1, 0]
[0, 1, 1, 0, 0, 1, 0, 0]
[0, 1, 1, 1, 0, 0, 0, 0]
[0, 2, 0, 0, 0, 0, 0, 0]
[0, 2, 0, 0, 0, 0, 0, 1]
[0, 2, 0, 0, 0, 0, 1, 0]
[0, 2, 0, 0, 0, 1, 0, 0]
[0, 2, 0, 0, 1, 0, 0, 0]
[0, 2, 0, 1, 0, 0, 0, 0]
[0, 2, 1, 0, 0, 0, 0, 0]
[0, 3, 0, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 0, 1]
[1, 0, 0, 0, 0, 0, 0, 2]
[1, 0, 0, 0, 0, 0, 1, 0]
[1, 0, 0, 0, 0, 0, 1, 1]
[1, 0, 0, 0, 0, 0, 2, 0]
[1, 0, 0, 0, 0, 1, 0, 0]
[1, 0, 0, 0, 0, 1, 0, 1]
[1, 0, 0, 0, 0, 1, 1, 0]
[1, 0, 0, 0, 0, 2, 0, 0]
[1, 0, 0, 0, 1, 0, 0, 0]
[1, 0, 0, 0, 1, 0, 0, 1]
[1, 0, 0, 0, 1, 0, 1, 0]
[1, 0, 0, 0, 1, 1, 0, 0]
[1, 0, 0, 1, 0, 0, 0, 0]
[1, 0, 0, 1, 0, 0, 0, 1]
[1, 0, 0, 1, 0, 0, 1, 0]
[1, 0, 0, 1, 0, 1, 0, 0]
[1, 0, 0, 2, 0, 0, 0, 0]
[1, 0, 1, 0, 0, 0, 0, 0]
[1, 0, 1, 0, 0, 0, 0, 1]
[1, 0, 1, 0, 0, 0, 1, 0]
[1, 0, 1, 0, 0, 1, 0, 0]
[1, 1, 0, 0, 0, 0, 0, 0]
[1, 1, 0, 0, 0, 0, 0, 1]
[1, 1, 0, 0, 0, 0, 1, 0]
[1, 1, 0, 0, 0, 1, 0, 0]
[1, 1, 0, 0, 1, 0, 0, 0]
[1, 1, 0, 1, 0, 0, 0, 0]
[1, 1, 1, 0, 0, 0, 0, 0]
[1, 2, 0, 0, 0, 0, 0, 0]
[2, 0, 0, 0, 0, 0, 0, 0]
[2, 0, 0, 0, 0, 0, 0, 1]
[2, 0, 0, 0, 0, 0, 1, 0]
[2, 0, 0, 0, 0, 1, 0, 0]
[2, 0, 0, 1, 0, 0, 0, 0]
[2, 1, 0, 0, 0, 0, 0, 0]
[3, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 1]
[0, 1, 0]
[1, 0, 0]
[0, 0, 0]
[0.01971 s] survived
   - [#  51] CRP S_x_v1: 
--------------------------------------------------------------------------------
  46:         self.rem1 += self.A[i][0] * self.current[i]
  47:         self.rem2 += self.A[i][1] * self.current[i]
  48:         self.res_per_route[i][0] = 0
  49:         self.res_per_route[i][1] = 0
- 50:         self.current[i] = 0
+ 50:         self.current[i] = 1
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 1]
[0, 0, 0, 2]
[0, 0, 0, 3]
[0, 0, 1, 1]
[0, 0, 1, 2]
[0, 0, 1, 3]
[0.00733 s] killed by test_does_not_exceed (tests_Sxv1.TestSx)
   - [#  52] LCR S_x_v1: 
--------------------------------------------------------------------------------
  35:         self.res_per_route[i][0] = self.res_per_route[i][0] + self.A[i][0]
  36:         self.res_per_route[i][1] = self.res_per_route[i][1] + self.A[i][1]
  37:     
  38:     def one_more_route_i_fits(self, i):
- 39:         return (self.A[i][0] <= self.rem1 and self.A[i][1] <= self.rem2)
+ 39:         return (self.A[i][0] <= self.rem1 or self.A[i][1] <= self.rem2)
  40:     
  41:     def remove_all_routes_of_type_i_or_greater(self, i):
  42:         for j in range(i, len(self.A)):
  43:             self.remove_all_routes_of_type_i(j)
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 1]
[0, 0, 0, 2]
[0, 0, 1, 0]
[0, 0, 1, 1]
[0, 0, 1, 2]
[0.00741 s] killed by test_does_not_exceed (tests_Sxv1.TestSx)
   - [#  53] ROR S_x_v1: 
--------------------------------------------------------------------------------
  16:             self.add_one_more_route_i(self.route)
  17:             return self.current
  18:         else:
  19:             self.remove_all_routes_of_type_i(self.route)
- 20:             while self.route > 0:
+ 20:             while self.route < 0:
  21:                 self.route -= 1
  22:                 if self.one_more_route_i_fits(self.route):
  23:                     self.add_one_more_route_i(self.route)
  24:                     self.route = len(self.A) - 1
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 0, 0, 3]
[0, 0, 0, 0, 0, 0, 4]
[0, 0, 0, 0, 0, 0, 5]
[0, 0, 0, 0, 0, 0, 6]
[0, 0, 0, 0, 0, 0, 7]
[0, 0, 0, 0, 0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 0, 0, 0, 0]
[0.00698 s] survived
   - [#  54] ROR S_x_v1: 
--------------------------------------------------------------------------------
  16:             self.add_one_more_route_i(self.route)
  17:             return self.current
  18:         else:
  19:             self.remove_all_routes_of_type_i(self.route)
- 20:             while self.route > 0:
+ 20:             while self.route >= 0:
  21:                 self.route -= 1
  22:                 if self.one_more_route_i_fits(self.route):
  23:                     self.add_one_more_route_i(self.route)
  24:                     self.route = len(self.A) - 1
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 0, 0, 1, 1]
[0, 0, 0, 0, 0, 0, 2, 0]
[0, 0, 0, 0, 0, 1, 0, 0]
[0, 0, 0, 0, 0, 1, 0, 1]
[0, 0, 0, 0, 0, 1, 1, 0]
[0, 0, 0, 0, 0, 2, 0, 0]
[0, 0, 0, 0, 1, 0, 0, 0]
[0, 0, 0, 0, 1, 0, 0, 1]
[0, 0, 0, 0, 1, 0, 1, 0]
[0, 0, 0, 0, 1, 1, 0, 0]
[0, 0, 0, 0, 2, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 0, 1]
[0, 0, 0, 1, 0, 0, 1, 0]
[0, 0, 0, 1, 0, 1, 0, 0]
[0, 0, 0, 1, 0, 1, 0, 1]
[0, 0, 0, 1, 0, 1, 1, 0]
[0, 0, 0, 1, 0, 2, 0, 0]
[0, 0, 0, 1, 1, 0, 0, 0]
[0, 0, 0, 1, 1, 0, 0, 1]
[0, 0, 0, 1, 1, 0, 1, 0]
[0, 0, 0, 1, 1, 1, 0, 0]
[0, 0, 0, 1, 2, 0, 0, 0]
[0, 0, 0, 2, 0, 0, 0, 0]
[0, 0, 0, 2, 0, 0, 0, 1]
[0, 0, 0, 2, 0, 0, 1, 0]
[0, 0, 0, 2, 0, 1, 0, 0]
[0, 0, 0, 2, 0, 2, 0, 0]
[0, 0, 0, 2, 1, 0, 0, 0]
[0, 0, 0, 2, 1, 1, 0, 0]
[0, 0, 0, 2, 2, 0, 0, 0]
[0, 0, 0, 3, 0, 0, 0, 0]
[0, 0, 0, 3, 0, 0, 0, 1]
[0, 0, 0, 3, 0, 0, 1, 0]
[0, 0, 0, 3, 0, 1, 0, 0]
[0, 0, 0, 3, 1, 0, 0, 0]
[0, 0, 0, 4, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 1]
[0, 0, 1, 0, 0, 0, 1, 0]
[0, 0, 1, 0, 0, 1, 0, 0]
[0, 0, 1, 0, 1, 0, 0, 0]
[0, 0, 1, 1, 0, 0, 0, 0]
[0, 0, 1, 1, 0, 0, 0, 1]
[0, 0, 1, 1, 0, 0, 1, 0]
[0, 0, 1, 1, 0, 1, 0, 0]
[0, 0, 1, 1, 1, 0, 0, 0]
[0, 0, 1, 2, 0, 0, 0, 0]
[0, 0, 1, 2, 0, 1, 0, 0]
[0, 0, 1, 2, 1, 0, 0, 0]
[0, 0, 1, 3, 0, 0, 0, 0]
[0, 0, 1, 4, 0, 0, 0, 0]
[0, 0, 2, 0, 0, 0, 0, 0]
[0, 0, 2, 1, 0, 0, 0, 0]
[0, 0, 2, 2, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0, 0, 1]
[0, 1, 0, 0, 0, 0, 1, 0]
[0, 1, 0, 0, 0, 1, 0, 0]
[0, 1, 0, 0, 0, 1, 0, 1]
[0, 1, 0, 0, 0, 1, 1, 0]
[0, 1, 0, 0, 0, 2, 0, 0]
[0, 1, 0, 0, 1, 0, 0, 0]
[0, 1, 0, 0, 1, 0, 0, 1]
[0, 1, 0, 0, 1, 0, 1, 0]
[0, 1, 0, 0, 1, 1, 0, 0]
[0, 1, 0, 0, 2, 0, 0, 0]
[0, 1, 0, 1, 0, 0, 0, 0]
[0, 1, 0, 1, 0, 0, 0, 1]
[0, 1, 0, 1, 0, 0, 1, 0]
[0, 1, 0, 1, 0, 1, 0, 0]
[0, 1, 0, 1, 0, 2, 0, 0]
[0, 1, 0, 1, 1, 0, 0, 0]
[0, 1, 0, 1, 1, 1, 0, 0]
[0, 1, 0, 1, 2, 0, 0, 0]
[0, 1, 0, 2, 0, 0, 0, 0]
[0, 1, 0, 2, 0, 0, 0, 1]
[0, 1, 0, 2, 0, 0, 1, 0]
[0, 1, 0, 2, 0, 1, 0, 0]
[0, 1, 0, 2, 1, 0, 0, 0]
[0, 1, 0, 3, 0, 0, 0, 0]
[0, 1, 0, 3, 0, 0, 1, 0]
[0, 1, 0, 3, 0, 1, 0, 0]
[0, 1, 0, 3, 1, 0, 0, 0]
[0, 1, 0, 4, 0, 0, 0, 0]
[0, 1, 1, 0, 0, 0, 0, 0]
[0, 1, 1, 0, 0, 0, 0, 1]
[0, 1, 1, 0, 0, 0, 1, 0]
[0, 1, 1, 0, 0, 1, 0, 0]
[0, 1, 1, 0, 1, 0, 0, 0]
[0, 1, 1, 1, 0, 0, 0, 0]
[0, 1, 1, 1, 0, 1, 0, 0]
[0, 1, 1, 1, 1, 0, 0, 0]
[0, 1, 1, 2, 0, 0, 0, 0]
[0, 1, 1, 3, 0, 0, 0, 0]
[0, 1, 2, 0, 0, 0, 0, 0]
[0, 1, 2, 1, 0, 0, 0, 0]
[0, 2, 0, 0, 0, 0, 0, 0]
[0, 2, 0, 0, 0, 0, 0, 1]
[0, 2, 0, 0, 0, 0, 1, 0]
[0, 2, 0, 0, 0, 1, 0, 0]
[0, 2, 0, 0, 0, 2, 0, 0]
[0, 2, 0, 0, 1, 0, 0, 0]
[0, 2, 0, 0, 1, 1, 0, 0]
[0, 2, 0, 0, 2, 0, 0, 0]
[0, 2, 0, 1, 0, 0, 0, 0]
[0, 2, 0, 1, 0, 0, 0, 1]
[0, 2, 0, 1, 0, 0, 1, 0]
[0, 2, 0, 1, 0, 1, 0, 0]
[0, 2, 0, 1, 1, 0, 0, 0]
[0, 2, 0, 2, 0, 0, 0, 0]
[0, 2, 0, 2, 0, 0, 0, 1]
[0, 2, 0, 2, 0, 0, 1, 0]
[0, 2, 0, 2, 0, 1, 0, 0]
[0, 2, 0, 2, 1, 0, 0, 0]
[0, 2, 0, 3, 0, 0, 0, 0]
[0, 2, 1, 0, 0, 0, 0, 0]
[0, 2, 1, 0, 0, 1, 0, 0]
[0, 2, 1, 0, 1, 0, 0, 0]
[0, 2, 1, 1, 0, 0, 0, 0]
[0, 2, 1, 2, 0, 0, 0, 0]
[0, 2, 1, 3, 0, 0, 0, 0]
[0, 2, 2, 0, 0, 0, 0, 0]
[0, 3, 0, 0, 0, 0, 0, 0]
[0, 3, 0, 0, 0, 0, 0, 1]
[0, 3, 0, 0, 0, 0, 1, 0]
[0, 3, 0, 0, 0, 1, 0, 0]
[0, 3, 0, 0, 1, 0, 0, 0]
[0, 3, 0, 1, 0, 0, 0, 0]
[0, 3, 0, 1, 0, 0, 0, 1]
[0, 3, 0, 1, 0, 0, 1, 0]
[0, 3, 0, 1, 0, 1, 0, 0]
[0, 3, 0, 1, 1, 0, 0, 0]
[0, 3, 0, 2, 0, 0, 0, 0]
[0, 3, 0, 2, 0, 0, 1, 0]
[0, 3, 0, 2, 0, 1, 0, 0]
[0, 3, 0, 2, 1, 0, 0, 0]
[0, 3, 0, 3, 0, 0, 0, 0]
[0, 3, 1, 0, 0, 0, 0, 0]
[0, 3, 1, 1, 0, 0, 0, 0]
[0, 3, 1, 2, 0, 0, 0, 0]
[0, 4, 0, 0, 0, 0, 0, 0]
[0, 4, 0, 0, 0, 0, 0, 1]
[0, 4, 0, 0, 0, 0, 1, 0]
[0, 4, 0, 0, 0, 1, 0, 0]
[0, 4, 0, 0, 1, 0, 0, 0]
[0, 4, 0, 1, 0, 0, 0, 0]
[0, 4, 0, 1, 0, 0, 0, 1]
[0, 4, 0, 1, 0, 0, 1, 0]
[0, 4, 0, 1, 0, 1, 0, 0]
[0, 4, 0, 1, 1, 0, 0, 0]
[0, 4, 0, 2, 0, 0, 0, 0]
[0, 4, 1, 0, 0, 0, 0, 0]
[0, 4, 1, 1, 0, 0, 0, 0]
[0, 4, 1, 2, 0, 0, 0, 0]
[0, 5, 0, 0, 0, 0, 0, 0]
[0, 5, 0, 0, 0, 0, 0, 1]
[0, 5, 0, 0, 0, 0, 1, 0]
[0, 5, 0, 0, 0, 1, 0, 0]
[0, 5, 0, 0, 1, 0, 0, 0]
[0, 5, 0, 1, 0, 0, 0, 0]
[0, 5, 0, 1, 0, 1, 0, 0]
[0, 5, 0, 1, 1, 0, 0, 0]
[0, 5, 0, 2, 0, 0, 0, 0]
[0, 5, 1, 0, 0, 0, 0, 0]
[0, 5, 1, 1, 0, 0, 0, 0]
[0, 6, 0, 0, 0, 0, 0, 0]
[0, 6, 0, 0, 0, 1, 0, 0]
[0, 6, 0, 0, 1, 0, 0, 0]
[0, 6, 0, 1, 0, 0, 0, 0]
[0, 6, 1, 0, 0, 0, 0, 0]
[0, 7, 0, 0, 0, 0, 0, 0]
[0, 7, 0, 1, 0, 0, 0, 0]
[0, 8, 0, 0, 0, 0, 0, 0]
[0, 9, 0, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 0, 1]
[1, 0, 0, 0, 0, 0, 1, 0]
[1, 0, 0, 0, 0, 1, 0, 0]
[1, 0, 0, 0, 0, 1, 0, 1]
[1, 0, 0, 0, 0, 1, 1, 0]
[1, 0, 0, 0, 0, 2, 0, 0]
[1, 0, 0, 0, 1, 0, 0, 0]
[1, 0, 0, 0, 1, 0, 0, 1]
[1, 0, 0, 0, 1, 0, 1, 0]
[1, 0, 0, 0, 1, 1, 0, 0]
[1, 0, 0, 0, 2, 0, 0, 0]
[1, 0, 0, 1, 0, 0, 0, 0]
[1, 0, 0, 1, 0, 0, 0, 1]
[1, 0, 0, 1, 0, 0, 1, 0]
[1, 0, 0, 1, 0, 1, 0, 0]
[1, 0, 0, 1, 0, 2, 0, 0]
[1, 0, 0, 1, 1, 0, 0, 0]
[1, 0, 0, 1, 1, 1, 0, 0]
[1, 0, 0, 1, 2, 0, 0, 0]
[1, 0, 0, 2, 0, 0, 0, 0]
[1, 0, 0, 2, 0, 0, 0, 1]
[1, 0, 0, 2, 0, 0, 1, 0]
[1, 0, 0, 2, 0, 1, 0, 0]
[1, 0, 0, 2, 1, 0, 0, 0]
[1, 0, 0, 3, 0, 0, 0, 0]
[1, 0, 0, 3, 0, 0, 1, 0]
[1, 0, 0, 3, 0, 1, 0, 0]
[1, 0, 0, 3, 1, 0, 0, 0]
[1, 0, 0, 4, 0, 0, 0, 0]
[1, 0, 1, 0, 0, 0, 0, 0]
[1, 0, 1, 0, 0, 0, 0, 1]
[1, 0, 1, 0, 0, 0, 1, 0]
[1, 0, 1, 0, 0, 1, 0, 0]
[1, 0, 1, 0, 1, 0, 0, 0]
[1, 0, 1, 1, 0, 0, 0, 0]
[1, 0, 1, 1, 0, 1, 0, 0]
[1, 0, 1, 1, 1, 0, 0, 0]
[1, 0, 1, 2, 0, 0, 0, 0]
[1, 0, 1, 3, 0, 0, 0, 0]
[1, 0, 2, 0, 0, 0, 0, 0]
[1, 0, 2, 1, 0, 0, 0, 0]
[1, 1, 0, 0, 0, 0, 0, 0]
[1, 1, 0, 0, 0, 0, 0, 1]
[1, 1, 0, 0, 0, 0, 1, 0]
[1, 1, 0, 0, 0, 1, 0, 0]
[1, 1, 0, 0, 0, 2, 0, 0]
[1, 1, 0, 0, 1, 0, 0, 0]
[1, 1, 0, 0, 1, 1, 0, 0]
[1, 1, 0, 0, 2, 0, 0, 0]
[1, 1, 0, 1, 0, 0, 0, 0]
[1, 1, 0, 1, 0, 0, 0, 1]
[1, 1, 0, 1, 0, 0, 1, 0]
[1, 1, 0, 1, 0, 1, 0, 0]
[1, 1, 0, 1, 1, 0, 0, 0]
[1, 1, 0, 2, 0, 0, 0, 0]
[1, 1, 0, 2, 0, 0, 0, 1]
[1, 1, 0, 2, 0, 0, 1, 0]
[1, 1, 0, 2, 0, 1, 0, 0]
[1, 1, 0, 2, 1, 0, 0, 0]
[1, 1, 0, 3, 0, 0, 0, 0]
[1, 1, 1, 0, 0, 0, 0, 0]
[1, 1, 1, 0, 0, 1, 0, 0]
[1, 1, 1, 0, 1, 0, 0, 0]
[1, 1, 1, 1, 0, 0, 0, 0]
[1, 1, 1, 2, 0, 0, 0, 0]
[1, 1, 1, 3, 0, 0, 0, 0]
[1, 1, 2, 0, 0, 0, 0, 0]
[1, 2, 0, 0, 0, 0, 0, 0]
[1, 2, 0, 0, 0, 0, 0, 1]
[1, 2, 0, 0, 0, 0, 1, 0]
[1, 2, 0, 0, 0, 1, 0, 0]
[1, 2, 0, 0, 1, 0, 0, 0]
[1, 2, 0, 1, 0, 0, 0, 0]
[1, 2, 0, 1, 0, 0, 0, 1]
[1, 2, 0, 1, 0, 0, 1, 0]
[1, 2, 0, 1, 0, 1, 0, 0]
[1, 2, 0, 1, 1, 0, 0, 0]
[1, 2, 0, 2, 0, 0, 0, 0]
[1, 2, 0, 2, 0, 0, 1, 0]
[1, 2, 0, 2, 0, 1, 0, 0]
[1, 2, 0, 2, 1, 0, 0, 0]
[1, 2, 0, 3, 0, 0, 0, 0]
[1, 2, 1, 0, 0, 0, 0, 0]
[1, 2, 1, 1, 0, 0, 0, 0]
[1, 2, 1, 2, 0, 0, 0, 0]
[1, 3, 0, 0, 0, 0, 0, 0]
[1, 3, 0, 0, 0, 0, 0, 1]
[1, 3, 0, 0, 0, 0, 1, 0]
[1, 3, 0, 0, 0, 1, 0, 0]
[1, 3, 0, 0, 1, 0, 0, 0]
[1, 3, 0, 1, 0, 0, 0, 0]
[1, 3, 0, 1, 0, 0, 0, 1]
[1, 3, 0, 1, 0, 0, 1, 0]
[1, 3, 0, 1, 0, 1, 0, 0]
[1, 3, 0, 1, 1, 0, 0, 0]
[1, 3, 0, 2, 0, 0, 0, 0]
[1, 3, 1, 0, 0, 0, 0, 0]
[1, 3, 1, 1, 0, 0, 0, 0]
[1, 3, 1, 2, 0, 0, 0, 0]
[1, 4, 0, 0, 0, 0, 0, 0]
[1, 4, 0, 0, 0, 0, 0, 1]
[1, 4, 0, 0, 0, 0, 1, 0]
[1, 4, 0, 0, 0, 1, 0, 0]
[1, 4, 0, 0, 1, 0, 0, 0]
[1, 4, 0, 1, 0, 0, 0, 0]
[1, 4, 0, 1, 0, 1, 0, 0]
[1, 4, 0, 1, 1, 0, 0, 0]
[1, 4, 0, 2, 0, 0, 0, 0]
[1, 4, 1, 0, 0, 0, 0, 0]
[1, 4, 1, 1, 0, 0, 0, 0]
[1, 5, 0, 0, 0, 0, 0, 0]
[1, 5, 0, 0, 0, 1, 0, 0]
[1, 5, 0, 0, 1, 0, 0, 0]
[1, 5, 0, 1, 0, 0, 0, 0]
[1, 5, 1, 0, 0, 0, 0, 0]
[1, 6, 0, 0, 0, 0, 0, 0]
[1, 6, 0, 1, 0, 0, 0, 0]
[1, 7, 0, 0, 0, 0, 0, 0]
[1, 8, 0, 0, 0, 0, 0, 0]
[2, 0, 0, 0, 0, 0, 0, 0]
[2, 0, 0, 0, 0, 0, 0, 1]
[2, 0, 0, 0, 0, 0, 1, 0]
[2, 0, 0, 0, 0, 1, 0, 0]
[2, 0, 0, 0, 0, 2, 0, 0]
[2, 0, 0, 0, 1, 0, 0, 0]
[2, 0, 0, 0, 1, 1, 0, 0]
[2, 0, 0, 0, 2, 0, 0, 0]
[2, 0, 0, 1, 0, 0, 0, 0]
[2, 0, 0, 1, 0, 0, 0, 1]
[2, 0, 0, 1, 0, 0, 1, 0]
[2, 0, 0, 1, 0, 1, 0, 0]
[2, 0, 0, 1, 1, 0, 0, 0]
[2, 0, 0, 2, 0, 0, 0, 0]
[2, 0, 0, 2, 0, 0, 0, 1]
[2, 0, 0, 2, 0, 0, 1, 0]
[2, 0, 0, 2, 0, 1, 0, 0]
[2, 0, 0, 2, 1, 0, 0, 0]
[2, 0, 0, 3, 0, 0, 0, 0]
[2, 0, 1, 0, 0, 0, 0, 0]
[2, 0, 1, 0, 0, 1, 0, 0]
[2, 0, 1, 0, 1, 0, 0, 0]
[2, 0, 1, 1, 0, 0, 0, 0]
[2, 0, 1, 2, 0, 0, 0, 0]
[2, 0, 1, 3, 0, 0, 0, 0]
[2, 0, 2, 0, 0, 0, 0, 0]
[2, 1, 0, 0, 0, 0, 0, 0]
[2, 1, 0, 0, 0, 0, 0, 1]
[2, 1, 0, 0, 0, 0, 1, 0]
[2, 1, 0, 0, 0, 1, 0, 0]
[2, 1, 0, 0, 1, 0, 0, 0]
[2, 1, 0, 1, 0, 0, 0, 0]
[2, 1, 0, 1, 0, 0, 0, 1]
[2, 1, 0, 1, 0, 0, 1, 0]
[2, 1, 0, 1, 0, 1, 0, 0]
[2, 1, 0, 1, 1, 0, 0, 0]
[2, 1, 0, 2, 0, 0, 0, 0]
[2, 1, 0, 2, 0, 0, 1, 0]
[2, 1, 0, 2, 0, 1, 0, 0]
[2, 1, 0, 2, 1, 0, 0, 0]
[2, 1, 0, 3, 0, 0, 0, 0]
[2, 1, 1, 0, 0, 0, 0, 0]
[2, 1, 1, 1, 0, 0, 0, 0]
[2, 1, 1, 2, 0, 0, 0, 0]
[2, 2, 0, 0, 0, 0, 0, 0]
[2, 2, 0, 0, 0, 0, 0, 1]
[2, 2, 0, 0, 0, 0, 1, 0]
[2, 2, 0, 0, 0, 1, 0, 0]
[2, 2, 0, 0, 1, 0, 0, 0]
[2, 2, 0, 1, 0, 0, 0, 0]
[2, 2, 0, 1, 0, 0, 0, 1]
[2, 2, 0, 1, 0, 0, 1, 0]
[2, 2, 0, 1, 0, 1, 0, 0]
[2, 2, 0, 1, 1, 0, 0, 0]
[2, 2, 0, 2, 0, 0, 0, 0]
[2, 2, 1, 0, 0, 0, 0, 0]
[2, 2, 1, 1, 0, 0, 0, 0]
[2, 2, 1, 2, 0, 0, 0, 0]
[2, 3, 0, 0, 0, 0, 0, 0]
[2, 3, 0, 0, 0, 0, 0, 1]
[2, 3, 0, 0, 0, 0, 1, 0]
[2, 3, 0, 0, 0, 1, 0, 0]
[2, 3, 0, 0, 1, 0, 0, 0]
[2, 3, 0, 1, 0, 0, 0, 0]
[2, 3, 0, 1, 0, 1, 0, 0]
[2, 3, 0, 1, 1, 0, 0, 0]
[2, 3, 0, 2, 0, 0, 0, 0]
[2, 3, 1, 0, 0, 0, 0, 0]
[2, 3, 1, 1, 0, 0, 0, 0]
[2, 4, 0, 0, 0, 0, 0, 0]
[2, 4, 0, 0, 0, 1, 0, 0]
[2, 4, 0, 0, 1, 0, 0, 0]
[2, 4, 0, 1, 0, 0, 0, 0]
[2, 4, 1, 0, 0, 0, 0, 0]
[2, 5, 0, 0, 0, 0, 0, 0]
[2, 5, 0, 1, 0, 0, 0, 0]
[2, 6, 0, 0, 0, 0, 0, 0]
[2, 7, 0, 0, 0, 0, 0, 0]
[3, 0, 0, 0, 0, 0, 0, 0]
[3, 0, 0, 0, 0, 0, 0, 1]
[3, 0, 0, 0, 0, 0, 1, 0]
[3, 0, 0, 0, 0, 1, 0, 0]
[3, 0, 0, 0, 1, 0, 0, 0]
[3, 0, 0, 1, 0, 0, 0, 0]
[3, 0, 0, 1, 0, 0, 0, 1]
[3, 0, 0, 1, 0, 0, 1, 0]
[3, 0, 0, 1, 0, 1, 0, 0]
[3, 0, 0, 1, 1, 0, 0, 0]
[3, 0, 0, 2, 0, 0, 0, 0]
[3, 0, 0, 2, 0, 0, 1, 0]
[3, 0, 0, 2, 0, 1, 0, 0]
[3, 0, 0, 2, 1, 0, 0, 0]
[3, 0, 0, 3, 0, 0, 0, 0]
[3, 0, 1, 0, 0, 0, 0, 0]
[3, 0, 1, 1, 0, 0, 0, 0]
[3, 0, 1, 2, 0, 0, 0, 0]
[3, 1, 0, 0, 0, 0, 0, 0]
[3, 1, 0, 0, 0, 0, 0, 1]
[3, 1, 0, 0, 0, 0, 1, 0]
[3, 1, 0, 0, 0, 1, 0, 0]
[3, 1, 0, 0, 1, 0, 0, 0]
[3, 1, 0, 1, 0, 0, 0, 0]
[3, 1, 0, 1, 0, 0, 0, 1]
[3, 1, 0, 1, 0, 0, 1, 0]
[3, 1, 0, 1, 0, 1, 0, 0]
[3, 1, 0, 1, 1, 0, 0, 0]
[3, 1, 0, 2, 0, 0, 0, 0]
[3, 1, 1, 0, 0, 0, 0, 0]
[3, 1, 1, 1, 0, 0, 0, 0]
[3, 1, 1, 2, 0, 0, 0, 0]
[3, 2, 0, 0, 0, 0, 0, 0]
[3, 2, 0, 0, 0, 0, 0, 1]
[3, 2, 0, 0, 0, 0, 1, 0]
[3, 2, 0, 0, 0, 1, 0, 0]
[3, 2, 0, 0, 1, 0, 0, 0]
[3, 2, 0, 1, 0, 0, 0, 0]
[3, 2, 0, 1, 0, 1, 0, 0]
[3, 2, 0, 1, 1, 0, 0, 0]
[3, 2, 0, 2, 0, 0, 0, 0]
[3, 2, 1, 0, 0, 0, 0, 0]
[3, 2, 1, 1, 0, 0, 0, 0]
[3, 3, 0, 0, 0, 0, 0, 0]
[3, 3, 0, 0, 0, 1, 0, 0]
[3, 3, 0, 0, 1, 0, 0, 0]
[3, 3, 0, 1, 0, 0, 0, 0]
[3, 3, 1, 0, 0, 0, 0, 0]
[3, 4, 0, 0, 0, 0, 0, 0]
[3, 4, 0, 1, 0, 0, 0, 0]
[3, 5, 0, 0, 0, 0, 0, 0]
[3, 6, 0, 0, 0, 0, 0, 0]
[4, 0, 0, 0, 0, 0, 0, 0]
[4, 0, 0, 0, 0, 0, 0, 1]
[4, 0, 0, 0, 0, 0, 1, 0]
[4, 0, 0, 0, 0, 1, 0, 0]
[4, 0, 0, 0, 1, 0, 0, 0]
[4, 0, 0, 1, 0, 0, 0, 0]
[4, 0, 0, 1, 0, 0, 0, 1]
[4, 0, 0, 1, 0, 0, 1, 0]
[4, 0, 0, 1, 0, 1, 0, 0]
[4, 0, 0, 1, 1, 0, 0, 0]
[4, 0, 0, 2, 0, 0, 0, 0]
[4, 0, 1, 0, 0, 0, 0, 0]
[4, 0, 1, 1, 0, 0, 0, 0]
[4, 0, 1, 2, 0, 0, 0, 0]
[4, 1, 0, 0, 0, 0, 0, 0]
[4, 1, 0, 0, 0, 0, 0, 1]
[4, 1, 0, 0, 0, 0, 1, 0]
[4, 1, 0, 0, 0, 1, 0, 0]
[4, 1, 0, 0, 1, 0, 0, 0]
[4, 1, 0, 1, 0, 0, 0, 0]
[4, 1, 0, 1, 0, 1, 0, 0]
[4, 1, 0, 1, 1, 0, 0, 0]
[4, 1, 0, 2, 0, 0, 0, 0]
[4, 1, 1, 0, 0, 0, 0, 0]
[4, 1, 1, 1, 0, 0, 0, 0]
[4, 2, 0, 0, 0, 0, 0, 0]
[4, 2, 0, 0, 0, 1, 0, 0]
[4, 2, 0, 0, 1, 0, 0, 0]
[4, 2, 0, 1, 0, 0, 0, 0]
[4, 2, 1, 0, 0, 0, 0, 0]
[4, 3, 0, 0, 0, 0, 0, 0]
[4, 3, 0, 1, 0, 0, 0, 0]
[4, 4, 0, 0, 0, 0, 0, 0]
[4, 5, 0, 0, 0, 0, 0, 0]
[5, 0, 0, 0, 0, 0, 0, 0]
[5, 0, 0, 0, 0, 0, 0, 1]
[5, 0, 0, 0, 0, 0, 1, 0]
[5, 0, 0, 0, 0, 1, 0, 0]
[5, 0, 0, 0, 1, 0, 0, 0]
[5, 0, 0, 1, 0, 0, 0, 0]
[5, 0, 0, 1, 0, 1, 0, 0]
[5, 0, 0, 1, 1, 0, 0, 0]
[5, 0, 0, 2, 0, 0, 0, 0]
[5, 0, 1, 0, 0, 0, 0, 0]
[5, 0, 1, 1, 0, 0, 0, 0]
[5, 1, 0, 0, 0, 0, 0, 0]
[5, 1, 0, 0, 0, 1, 0, 0]
[5, 1, 0, 0, 1, 0, 0, 0]
[5, 1, 0, 1, 0, 0, 0, 0]
[5, 1, 1, 0, 0, 0, 0, 0]
[5, 2, 0, 0, 0, 0, 0, 0]
[5, 2, 0, 1, 0, 0, 0, 0]
[5, 3, 0, 0, 0, 0, 0, 0]
[5, 4, 0, 0, 0, 0, 0, 0]
[6, 0, 0, 0, 0, 0, 0, 0]
[6, 0, 0, 0, 0, 1, 0, 0]
[6, 0, 0, 0, 1, 0, 0, 0]
[6, 0, 0, 1, 0, 0, 0, 0]
[6, 0, 1, 0, 0, 0, 0, 0]
[6, 1, 0, 0, 0, 0, 0, 0]
[6, 1, 0, 1, 0, 0, 0, 0]
[6, 2, 0, 0, 0, 0, 0, 0]
[6, 3, 0, 0, 0, 0, 0, 0]
[7, 0, 0, 0, 0, 0, 0, 0]
[7, 0, 0, 1, 0, 0, 0, 0]
[7, 1, 0, 0, 0, 0, 0, 0]
[7, 2, 0, 0, 0, 0, 0, 0]
[8, 0, 0, 0, 0, 0, 0, 0]
[8, 1, 0, 0, 0, 0, 0, 0]
[9, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 1]
[0.12921 s] killed by test_does_not_exceed (tests_Sxv1.TestSx)
   - [#  55] ROR S_x_v1: 
--------------------------------------------------------------------------------
  35:         self.res_per_route[i][0] = self.res_per_route[i][0] + self.A[i][0]
  36:         self.res_per_route[i][1] = self.res_per_route[i][1] + self.A[i][1]
  37:     
  38:     def one_more_route_i_fits(self, i):
- 39:         return (self.A[i][0] <= self.rem1 and self.A[i][1] <= self.rem2)
+ 39:         return (self.A[i][0] >= self.rem1 and self.A[i][1] <= self.rem2)
  40:     
  41:     def remove_all_routes_of_type_i_or_greater(self, i):
  42:         for j in range(i, len(self.A)):
  43:             self.remove_all_routes_of_type_i(j)
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 1, 0]
[0, 0, 1, 1]
[1, 0, 0, 0]
[1, 0, 0, 1]
[1, 0, 0, 2]
[1, 0, 0, 3]
[1, 0, 0, 4]
[1, 0, 0, 5]
[1, 0, 1, 0]
[1, 1, 0, 0]
[1, 1, 0, 1]
[2, 0, 0, 0]
[0.00763 s] killed by test_more_than_half (tests_Sxv1.TestSx)
   - [#  56] ROR S_x_v1: 
--------------------------------------------------------------------------------
  35:         self.res_per_route[i][0] = self.res_per_route[i][0] + self.A[i][0]
  36:         self.res_per_route[i][1] = self.res_per_route[i][1] + self.A[i][1]
  37:     
  38:     def one_more_route_i_fits(self, i):
- 39:         return (self.A[i][0] <= self.rem1 and self.A[i][1] <= self.rem2)
+ 39:         return (self.A[i][0] < self.rem1 and self.A[i][1] <= self.rem2)
  40:     
  41:     def remove_all_routes_of_type_i_or_greater(self, i):
  42:         for j in range(i, len(self.A)):
  43:             self.remove_all_routes_of_type_i(j)
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 1]
[0, 1, 0]
[1, 0, 0]
[0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 0, 0, 3]
[0, 0, 0, 0, 0, 0, 4]
[0, 0, 0, 0, 0, 0, 5]
[0, 0, 0, 0, 0, 0, 6]
[0, 0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 0, 1, 1]
[0, 0, 0, 0, 0, 1, 2]
[0, 0, 0, 0, 0, 1, 3]
[0, 0, 0, 0, 0, 1, 4]
[0, 0, 0, 0, 0, 2, 0]
[0, 0, 0, 0, 0, 2, 1]
[0, 0, 0, 0, 0, 2, 2]
[0, 0, 0, 0, 0, 3, 0]
[0, 0, 0, 0, 1, 0, 0]
[0, 0, 0, 0, 1, 0, 1]
[0, 0, 0, 0, 1, 0, 2]
[0, 0, 0, 0, 1, 0, 3]
[0, 0, 0, 0, 1, 0, 4]
[0, 0, 0, 0, 1, 1, 0]
[0, 0, 0, 0, 1, 1, 1]
[0, 0, 0, 0, 1, 1, 2]
[0, 0, 0, 0, 2, 0, 0]
[0, 0, 0, 1, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 1]
[0, 0, 0, 1, 0, 0, 2]
[0, 0, 0, 1, 0, 0, 3]
[0, 0, 0, 1, 0, 0, 4]
[0, 0, 0, 1, 0, 0, 5]
[0, 0, 0, 1, 0, 1, 0]
[0, 0, 0, 1, 0, 1, 1]
[0, 0, 0, 1, 0, 1, 2]
[0, 0, 0, 1, 0, 1, 3]
[0, 0, 0, 1, 0, 2, 0]
[0, 0, 0, 1, 1, 0, 0]
[0, 0, 0, 1, 1, 0, 1]
[0, 0, 0, 2, 0, 0, 0]
[0, 0, 0, 2, 0, 0, 1]
[0, 0, 0, 2, 0, 0, 2]
[0, 1, 0, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0, 1]
[0, 1, 0, 0, 0, 0, 2]
[0, 1, 0, 0, 0, 0, 3]
[0, 1, 0, 0, 0, 1, 0]
[0, 1, 0, 0, 0, 1, 1]
[0, 1, 0, 1, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 1]
[1, 0, 0, 1, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0]
[0.00802 s] survived
   - [#  57] ROR S_x_v1: 
--------------------------------------------------------------------------------
  35:         self.res_per_route[i][0] = self.res_per_route[i][0] + self.A[i][0]
  36:         self.res_per_route[i][1] = self.res_per_route[i][1] + self.A[i][1]
  37:     
  38:     def one_more_route_i_fits(self, i):
- 39:         return (self.A[i][0] <= self.rem1 and self.A[i][1] <= self.rem2)
+ 39:         return (self.A[i][0] <= self.rem1 and self.A[i][1] >= self.rem2)
  40:     
  41:     def remove_all_routes_of_type_i_or_greater(self, i):
  42:         for j in range(i, len(self.A)):
  43:             self.remove_all_routes_of_type_i(j)
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 1, 0]
[0, 1, 1]
[0, 2, 0]
[0.00757 s] killed by test_more_than_half (tests_Sxv1.TestSx)
   - [#  58] ROR S_x_v1: 
--------------------------------------------------------------------------------
  35:         self.res_per_route[i][0] = self.res_per_route[i][0] + self.A[i][0]
  36:         self.res_per_route[i][1] = self.res_per_route[i][1] + self.A[i][1]
  37:     
  38:     def one_more_route_i_fits(self, i):
- 39:         return (self.A[i][0] <= self.rem1 and self.A[i][1] <= self.rem2)
+ 39:         return (self.A[i][0] <= self.rem1 and self.A[i][1] < self.rem2)
  40:     
  41:     def remove_all_routes_of_type_i_or_greater(self, i):
  42:         for j in range(i, len(self.A)):
  43:             self.remove_all_routes_of_type_i(j)
--------------------------------------------------------------------------------
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 0, 0, 0, 2]
[0, 0, 0, 0, 0, 0, 3]
[0, 0, 0, 0, 0, 0, 4]
[0, 0, 0, 0, 0, 0, 5]
[0, 0, 0, 0, 0, 0, 6]
[0, 0, 0, 0, 0, 1, 0]
[0, 0, 0, 0, 0, 1, 1]
[0, 0, 0, 0, 0, 1, 2]
[0, 0, 0, 0, 0, 1, 3]
[0, 0, 0, 0, 0, 1, 4]
[0, 0, 0, 0, 0, 1, 5]
[0, 0, 0, 0, 0, 2, 0]
[0, 0, 0, 0, 1, 0, 0]
[0, 0, 0, 0, 1, 0, 1]
[0, 0, 0, 0, 1, 0, 2]
[0, 0, 0, 0, 1, 0, 3]
[0, 0, 0, 0, 1, 1, 0]
[0, 0, 0, 0, 1, 1, 1]
[0, 0, 0, 0, 1, 1, 2]
[0, 0, 0, 0, 2, 0, 0]
[0, 0, 0, 1, 0, 0, 0]
[0, 0, 0, 1, 0, 0, 1]
[0, 0, 0, 1, 0, 0, 2]
[0, 0, 0, 1, 0, 0, 3]
[0, 0, 0, 1, 0, 1, 0]
[0, 0, 0, 1, 0, 1, 1]
[0, 0, 0, 1, 1, 0, 0]
[0, 0, 0, 2, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 1]
[0, 0, 1, 0, 0, 0, 2]
[0, 0, 1, 0, 0, 0, 3]
[0, 0, 1, 0, 0, 0, 4]
[0, 0, 1, 0, 0, 0, 5]
[0, 0, 1, 0, 0, 1, 0]
[0, 0, 1, 0, 1, 0, 0]
[0, 0, 1, 0, 1, 0, 1]
[0, 0, 1, 0, 1, 0, 2]
[0, 0, 1, 1, 0, 0, 0]
[0, 0, 1, 1, 0, 0, 1]
[0, 0, 2, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0, 0]
[0, 1, 0, 0, 0, 0, 1]
[0, 1, 0, 0, 0, 0, 2]
[0, 1, 0, 0, 0, 0, 3]
[0, 1, 0, 0, 0, 0, 4]
[0, 1, 0, 0, 0, 0, 5]
[0, 1, 0, 0, 0, 1, 0]
[0, 1, 0, 0, 0, 1, 1]
[0, 1, 0, 0, 1, 0, 0]
[0, 1, 0, 0, 1, 0, 1]
[0, 1, 0, 0, 1, 0, 2]
[0, 1, 0, 1, 0, 0, 0]
[0, 1, 0, 1, 0, 0, 1]
[0, 1, 0, 1, 0, 0, 2]
[0, 1, 1, 0, 0, 0, 0]
[0, 1, 1, 0, 0, 0, 1]
[0, 2, 0, 0, 0, 0, 0]
[0, 2, 0, 0, 0, 0, 1]
[0, 2, 0, 0, 0, 0, 2]
[1, 0, 0, 0, 0, 0, 0]
[1, 0, 0, 0, 0, 0, 1]
[1, 0, 0, 0, 0, 0, 2]
[1, 0, 0, 0, 0, 0, 3]
[1, 0, 0, 0, 0, 1, 0]
[1, 0, 0, 0, 0, 1, 1]
[1, 0, 0, 0, 0, 1, 2]
[1, 0, 0, 0, 1, 0, 0]
[1, 0, 0, 1, 0, 0, 0]
[1, 0, 1, 0, 0, 0, 0]
[1, 0, 1, 0, 0, 0, 1]
[1, 0, 1, 0, 0, 0, 2]
[1, 1, 0, 0, 0, 0, 0]
[1, 1, 0, 0, 0, 0, 1]
[1, 1, 0, 0, 0, 0, 2]
[1, 1, 0, 0, 0, 1, 0]
[1, 1, 1, 0, 0, 0, 0]
[1, 2, 0, 0, 0, 0, 0]
[1, 2, 0, 0, 0, 0, 1]
[2, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0]
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
Disclaimer: We are not checking the input yet so we don't take responsibility for crappy inputs 
[0, 0, 0, 1]
[0, 0, 0, 2]
[0, 0, 0, 3]
[0, 1, 0, 0]
[1, 0, 0, 0]
[1, 0, 0, 1]
[1, 0, 0, 2]
[0, 0, 0, 0]
[0.01094 s] survived
[*] Mutation score [18.66123 s]: 55.2%
   - all: 58
   - killed: 29 (50.0%)
   - survived: 26 (44.8%)
   - incompetent: 0 (0.0%)
   - timeout: 3 (5.2%)
[*] Coverage: 507 of 530 AST nodes (95.7%)
